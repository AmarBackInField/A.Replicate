The final answer is ```json
{
  "/.env.local": "# Example environment variables - DO NOT COMMIT SENSITIVE DATA HERE\n# Use environment variables on your hosting platform (e.g., Vercel, Netlify)\n\n# Example for Formspree (replace YOUR_FORM_ID with your actual Formspree ID)\n# NEXT_PUBLIC_FORMSPREE_ENDPOINT=\"https://formspree.io/f/YOUR_FORM_ID\"\n\n# Example for Resend (if using Resend for email)\n# RESEND_API_KEY=\"your_resend_api_key\"\n# CONTACT_EMAIL_TO=\"your_email@example.com\"\n\n# Calendly URL\nNEXT_PUBLIC_CALENDLY_URL=\"https://calendly.com/YOUR_CALENDLY_USERNAME/30min\" # Replace with actual Calendly link",
  "/.eslintrc.json": "{\n  \"extends\": [\"next/core-web-vitals\", \"prettier\"]\n}",
  "/.gitignore": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# Dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# Testing\n/coverage\n\n# Next.js\n/.next/\n/out/\n\n# Production\n/build\n\n# Misc\n.DS_Store\n*.pem\n\n# Logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Local Environment Variables\n.env*.local\n\n# Editor directories and files\n.vscode*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.sublime-workspace\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output folder\n/dist\n\n# Documentation folder\n/docs\n\n# dotenv environment variables file\n.env\n.env.development\n.env.test\n.env.production\n\n# Gatsby files\n.cache/\n# # Comment in the public line in if your project uses Gatsby and not Next.js\n# # https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# Mac files\n.AppleDouble\n.LSOverride\n\n# *.swp",
  "/.prettierrc.json": "{\n  \"semi\": true,\n  \"tabWidth\": 2,\n  \"printWidth\": 100,\n  \"singleQuote\": false,\n  \"trailingComma\": \"es5\",\n  \"jsxSingleQuote\": false,\n  \"bracketSpacing\": true,\n  \"bracketSameLine\": false,\n  \"arrowParens\": \"always\"\n}",
  "/next.config.mjs": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  // Optional: Add MDX support if you plan to use MDX\n  // pageExtensions: ['ts', 'tsx', 'js', 'jsx', 'md', 'mdx'],\n  // experimental: {\n  //   mdxRs: true,\n  // },\n  images: {\n    // Optionally configure remote patterns if using external images\n    // remotePatterns: [\n    //   {\n    //     protocol: 'https',\n    //     hostname: 'images.unsplash.com',\n    //   },\n    // ],\n  },\n};\n\n// Optional: Uncomment and install @next/mdx if you need MDX support\n// const withMDX = require('@next/mdx')();\n// module.exports = withMDX(nextConfig);\n\nexport default nextConfig;\n",
  "/package.json": "{\n  \"name\": \"amar-choudhary-portfolio\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"format\": \"prettier --write .\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  },\n  \"dependencies\": {\n    \"@heroicons/react\": \"^2.1.3\", // Example icon library\n    \"clsx\": \"^2.3.1\",\n    \"gray-matter\": \"^4.0.3\",\n    \"next\": \"14.2.3\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"react-markdown\": \"^9.0.1\", // For rendering Markdown content\n    \"remark\": \"^15.0.1\",\n    \"remark-html\": \"^16.0.1\", // If rendering Markdown to HTML server-side\n    \"tailwind-merge\": \"^2.3.0\",\n    \"react-calendly\": \"^4.3.0\", // For Calendly embed\n    \"react-icons\": \"^5.2.1\" // For social icons\n    // \"react-hook-form\": \"^7.51.4\" // Optional for complex forms\n    // \"resend\": \"^3.2.0\" // Optional for email sending via Resend\n  },\n  \"devDependencies\": {\n    \"@testing-library/jest-dom\": \"^6.4.5\",\n    \"@testing-library/react\": \"^15.0.7\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"autoprefixer\": \"^10.4.19\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.2.3\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"jest\": \"^29.7.0\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"postcss\": \"^8\",\n    \"prettier\": \"^3.2.5\",\n    \"prettier-plugin-tailwindcss\": \"^0.5.14\",\n    \"tailwindcss\": \"^3.4.3\",\n    \"typescript\": \"^5\",\n    \"@tailwindcss/typography\": \"^0.5.13\"\n  }\n}",
  "/postcss.config.js": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n",
  "/public/images/profile.jpg": "// This is a placeholder for the actual image file.\n// Please add a real image named profile.jpg here.",
  "/public/images/projects/adb-converter-thumb.png": "// This is a placeholder for the actual image file.\n// Please add a real image named adb-converter-thumb.png here.",
  "/public/images/projects/career-advisor-thumb.png": "// This is a placeholder for the actual image file.\n// Please add a real image named career-advisor-thumb.png here.",
  "/public/images/projects/erp-chatbot-thumb.png": "// This is a placeholder for the actual image file.\n// Please add a real image named erp-chatbot-thumb.png here.",
  "/public/images/projects/question-gen-thumb.png": "// This is a placeholder for the actual image file.\n// Please add a real image named question-gen-thumb.png here.",
  "/public/resume/Amar_Choudhary_Resume.pdf": "// This is a placeholder for the actual resume file.\n// Please add the actual PDF file named Amar_Choudhary_Resume.pdf here.",
  "/public/favicon.ico": "// This is a placeholder for the actual favicon file.\n// Please add a real favicon.ico here.",
  "/src/app/layout.tsx": "import type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./global.css\";\nimport Navbar from \"@/components/layout/Navbar\";\nimport Footer from \"@/components/layout/Footer\";\nimport { SpeedInsights } from \"@vercel/speed-insights/next\"\nimport { Analytics } from \"@vercel/analytics/react\"\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Amar Choudhary | AI & Data Science Portfolio\",\n  description: \"Portfolio of Amar Choudhary, showcasing expertise and projects in Machine Learning, Generative AI, and Data Science.\",\n};\n\n/**\n * RootLayout defines the main structure of the HTML page, including\n * navigation, footer, and global styles. It wraps all page content.\n * @param {Readonly<{ children: React.ReactNode }>} props - Component props.\n * @returns {JSX.Element} The root layout component.\n */\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${inter.className} bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100`}>\n        <div className=\"flex flex-col min-h-screen\">\n          <Navbar />\n          <main className=\"flex-grow container mx-auto px-4 py-8 md:py-12\">\n            {children}\n          </main>\n          <Footer />\n        </div>\n        <SpeedInsights />\n        <Analytics />\n      </body>\n    </html>\n  );\n}\n",
  "/src/app/page.tsx": "import Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/Button\";\nimport { ArrowRightIcon, CodeBracketIcon, CpuChipIcon, CommandLineIcon } from '@heroicons/react/24/outline'; // Example icons\n\n/**\n * HomePage is the main landing page of the portfolio.\n * It includes a hero section with introduction and calls to action.\n * @returns {JSX.Element} The home page component.\n */\nexport default function HomePage() {\n  return (\n    <section className=\"flex flex-col items-center justify-center text-center min-h-[calc(100vh-200px)] md:flex-row md:text-left md:space-x-12\">\n      {/* Left Side: Text Content */}\n      <div className=\"md:w-1/2 mb-8 md:mb-0 animate-fade-in-up\">\n        <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-4\">\n          Amar Choudhary\n        </h1>\n        <p className=\"text-xl md:text-2xl text-blue-600 dark:text-blue-400 font-semibold mb-6\">\n          Data Scientist | Generative AI Enthusiast\n        </p>\n        <p className=\"text-lg text-gray-700 dark:text-gray-300 mb-8 max-w-xl mx-auto md:mx-0\">\n          Building intelligent AI solutions with 5 years of experience in Machine Learning, Data Science, and specializing in Generative AI and Large Language Models.\n        </p>\n        <div className=\"flex flex-col sm:flex-row justify-center md:justify-start space-y-4 sm:space-y-0 sm:space-x-4\">\n          <Button asChild variant=\"primary\" size=\"lg\">\n            <Link href=\"/projects\">\n              View Projects <ArrowRightIcon className=\"ml-2 h-5 w-5\" />\n            </Link>\n          </Button>\n          <Button asChild variant=\"secondary\" size=\"lg\">\n            <Link href=\"/contact\">\n              Contact Me\n            </Link>\n          </Button>\n        </div>\n        {/* Optional: Rotating Keywords */}\n        <div className=\"mt-10 hidden sm:flex space-x-4 justify-center md:justify-start text-gray-500 dark:text-gray-400\">\n           <CpuChipIcon className=\"h-6 w-6\" title=\"Generative AI\" />\n           <CodeBracketIcon className=\"h-6 w-6\" title=\"LLMs\" />\n           <CommandLineIcon className=\"h-6 w-6\" title=\"Python\" />\n           {/* Add more icons/keywords as needed */}\n        </div>\n      </div>\n\n      {/* Right Side: Image */}\n      <div className=\"md:w-1/3 flex justify-center animate-fade-in\">\n        {/* Ensure the image path is correct and the image exists in /public */}\n        <Image\n          src=\"/images/profile.jpg\" // Placeholder path\n          alt=\"Amar Choudhary Profile Photo\"\n          width={300}\n          height={300}\n          priority // Load image faster as it's above the fold\n          className=\"rounded-full shadow-lg border-4 border-gray-200 dark:border-gray-700 object-cover w-64 h-64 md:w-80 md:h-80 lg:w-96 lg:h-96\"\n        />\n      </div>\n    </section>\n  );\n}\n",
  "/src/app/global.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-300;\n  }\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-bold text-gray-900 dark:text-gray-100;\n  }\n  h1 { @apply text-3xl md:text-4xl mb-4; }\n  h2 { @apply text-2xl md:text-3xl mb-3; }\n  h3 { @apply text-xl md:text-2xl mb-2; }\n  p {\n    @apply mb-4 leading-relaxed text-gray-700 dark:text-gray-300;\n  }\n  a {\n    @apply text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors;\n  }\n}\n\n@layer utilities {\n  /* Custom animation example */\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  .animate-fade-in-up {\n    animation: fadeInUp 0.6s ease-out forwards;\n  }\n  @keyframes fadeIn {\n      from { opacity: 0; }\n      to { opacity: 1; }\n  }\n  .animate-fade-in {\n      animation: fadeIn 0.8s ease-in forwards;\n  }\n}\n",
  "/src/app/not-found.tsx": "import Link from 'next/link';\nimport { Button } from '@/components/ui/Button';\nimport { ExclamationTriangleIcon } from '@heroicons/react/24/outline';\n\n/**\n * NotFound page displayed when a route does not match.\n * Provides a user-friendly message and a link back to the homepage.\n * @returns {JSX.Element} The 404 page component.\n */\nexport default function NotFound() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[calc(100vh-200px)] text-center px-4\">\n      <ExclamationTriangleIcon className=\"w-16 h-16 text-yellow-500 mb-4\" />\n      <h1 className=\"text-4xl font-bold mb-2\">404 - Page Not Found</h1>\n      <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-6\">\n        Oops! The page you are looking for does not exist or has been moved.\n      </p>\n      <Button asChild variant=\"primary\">\n        <Link href=\"/\">Go back to Home</Link>\n      </Button>\n    </div>\n  );\n}",
  "/src/app/about/page.tsx": "import { getAboutContent } from '@/lib/content';\nimport { Button } from '@/components/ui/Button';\nimport Link from 'next/link';\nimport { DocumentArrowDownIcon, AcademicCapIcon, SparklesIcon } from '@heroicons/react/24/outline';\nimport MarkdownRenderer from '@/components/ui/MarkdownRenderer';\n\n/**\n * AboutPage displays information about Amar Choudhary.\n * Fetches content from Markdown file and renders it.\n * Includes sections for journey, experience, hackathons, and resume download.\n * @returns {Promise<JSX.Element>} The about page component.\n */\nexport default async function AboutPage() {\n  const { frontmatter, content } = await getAboutContent();\n\n  return (\n    <div className=\"max-w-4xl mx-auto animate-fade-in\">\n      <h1 className=\"text-center mb-8 md:mb-12\">About Me</h1>\n\n      <section className=\"mb-12\">\n        <h2 className=\"flex items-center gap-2 text-2xl md:text-3xl border-b pb-2 mb-4\">\n          <AcademicCapIcon className=\"w-7 h-7 text-blue-600 dark:text-blue-400\" />\n          My Journey in AI & Data Science\n        </h2>\n        {/* Render Markdown content */}\n        <MarkdownRenderer content={content} />\n      </section>\n\n      <section className=\"mb-12\">\n        <h2 className=\"flex items-center gap-2 text-2xl md:text-3xl border-b pb-2 mb-4\">\n          <SparklesIcon className=\"w-7 h-7 text-yellow-500\" />\n          Experience & Expertise\n        </h2>\n        <p>With 5 years in the field, I've gained hands-on experience with cutting-edge technologies, including:</p>\n        <ul className=\"list-disc list-inside space-y-2 mb-4 ml-4 text-gray-700 dark:text-gray-300\">\n          {frontmatter.keyTechnologies?.map((tech: string) => <li key={tech}>{tech}</li>)}\n        </ul>\n        <p>My focus lies in leveraging these tools to build practical and innovative AI solutions.</p>\n      </section>\n\n      <section className=\"mb-12\">\n        <h2 className=\"text-2xl md:text-3xl border-b pb-2 mb-4\">Hackathons & Challenges</h2>\n        <div className=\"space-y-4\">\n          {frontmatter.hackathons?.map((hackathon: { name: string; description: string }) => (\n            <div key={hackathon.name} className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm\">\n              <h3 className=\"text-lg font-semibold mb-1\">{hackathon.name}</h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-0\">{hackathon.description}</p>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      <section className=\"text-center\">\n        <Button asChild variant=\"primary\" size=\"lg\">\n          <Link href=\"/resume/Amar_Choudhary_Resume.pdf\" target=\"_blank\" download>\n            <DocumentArrowDownIcon className=\"mr-2 h-5 w-5\" />\n            Download Resume/CV\n          </Link>\n        </Button>\n      </section>\n    </div>\n  );\n}\n",
  "/src/app/skills/page.tsx": "import { getSkills } from '@/lib/content';\nimport { Skill } from '@/types/skill';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { CodeBracketIcon, CpuChipIcon, CircleStackIcon, CloudArrowUpIcon, UsersIcon, SparklesIcon } from '@heroicons/react/24/outline'; // Import SparklesIcon\n\n/**\n * Maps skill categories to appropriate icons.\n * @param {string} category - The skill category name.\n * @returns {JSX.Element} An icon component.\n */\nconst CategoryIcon = ({ category }: { category: string }) => {\n  const iconClass = \"w-6 h-6 text-blue-600 dark:text-blue-400\";\n  switch (category.toLowerCase()) { // Use lowercase for robust matching\n    case 'programming':\n      return <CodeBracketIcon className={iconClass} />;\n    case 'ml/dl':\n      return <CpuChipIcon className={iconClass} />;\n    case 'genai':\n       return <SparklesIcon className={`${iconClass} text-yellow-500`} />; // Specific icon for GenAI\n    case 'data handling':\n      return <CircleStackIcon className={iconClass} />;\n    case 'cloud/deployment':\n      return <CloudArrowUpIcon className={iconClass} />;\n    case 'soft skills':\n      return <UsersIcon className={iconClass} />;\n    default:\n      return <CodeBracketIcon className={iconClass} />; // Default icon\n  }\n};\n\n/**\n * SkillsPage displays categorized technical and soft skills.\n * Fetches skill data from JSON and renders it in card format.\n * @returns {Promise<JSX.Element>} The skills page component.\n */\nexport default async function SkillsPage() {\n  const skillsData = await getSkills();\n\n  // Group skills by category\n  const categorizedSkills = skillsData.reduce((acc, skill) => {\n    const category = skill.category || 'Other';\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(skill);\n    return acc;\n  }, {} as Record<string, Skill[]>);\n\n  // Define the desired order of categories\n  const categoryOrder = [\n    'Programming',\n    'ML/DL',\n    'GenAI',\n    'Data Handling',\n    'Cloud/Deployment',\n    'Soft Skills',\n    'Other' // Ensure 'Other' is last or handle as needed\n  ];\n\n  // Sort categories based on the defined order\n  const sortedCategories = Object.entries(categorizedSkills).sort(([catA], [catB]) => {\n    const indexA = categoryOrder.indexOf(catA);\n    const indexB = categoryOrder.indexOf(catB);\n    // If a category isn't in the order list, place it at the end\n    return (indexA === -1 ? categoryOrder.length : indexA) - (indexB === -1 ? categoryOrder.length : indexB);\n  });\n\n  return (\n    <div className=\"animate-fade-in\">\n      <h1 className=\"text-center mb-8 md:mb-12\">Technical & Soft Skills</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8\">\n        {sortedCategories.map(([category, skills]) => (\n          <Card key={category} className=\"bg-white dark:bg-gray-800 shadow-md hover:shadow-lg transition-shadow duration-300 flex flex-col\">\n            <CardHeader className=\"flex flex-row items-center space-x-3 pb-4\">\n              <CategoryIcon category={category} />\n              <CardTitle className=\"text-xl md:text-2xl mb-0\">{category}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex-grow\">\n              <ul className=\"space-y-2\">\n                {skills.map((skill) => (\n                  <li key={skill.name} className=\"flex items-center text-gray-700 dark:text-gray-300\">\n                    {/* Optional: Add skill-specific icon here if available */}\n                    {/* <IconComponent className=\"w-4 h-4 mr-2 text-gray-500\" /> */}\n                    <span>{skill.name}</span>\n                    {/* Optional: Add proficiency indication (e.g., stars, text) if desired */}\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
  "/src/app/projects/page.tsx": "import { getAllProjects } from '@/lib/content';\nimport ProjectList from '@/components/features/ProjectList';\n\n/**\n * ProjectsPage displays a list of all projects.\n * Fetches project metadata and passes it to the ProjectList component.\n * @returns {Promise<JSX.Element>} The projects page component.\n */\nexport default async function ProjectsPage() {\n  const projects = await getAllProjects(); // Already sorted by order in getAllProjects\n\n  return (\n    <div className=\"animate-fade-in\">\n      <h1 className=\"text-center mb-8 md:mb-12\">Projects Showcase</h1>\n      <ProjectList projects={projects} />\n      {/* Optional: Add filtering/sorting controls here */}\n    </div>\n  );\n}\n",
  "/src/app/projects/[slug]/page.tsx": "import { getAllProjects, getProjectBySlug } from '@/lib/content';\nimport { notFound } from 'next/navigation';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/Button';\nimport { Tag } from '@/components/ui/Tag';\nimport MarkdownRenderer from '@/components/ui/MarkdownRenderer';\nimport { ArrowLeftIcon, LinkIcon, CodeBracketIcon } from '@heroicons/react/24/outline';\n\n// Generate static paths for all projects at build time\nexport async function generateStaticParams() {\n  const projects = await getAllProjects();\n  return projects.map((project) => ({\n    slug: project.slug,\n  }));\n}\n\n// Generate dynamic metadata for each project page\nexport async function generateMetadata({ params }: { params: { slug: string } }) {\n    try {\n        const { frontmatter } = await getProjectBySlug(params.slug);\n        return {\n            title: `${frontmatter.title} | Amar Choudhary Portfolio`,\n            description: frontmatter.shortDescription,\n            // Add other metadata like open graph tags if needed\n        };\n    } catch (error) {\n        // Handle case where project is not found during metadata generation\n        return {\n            title: 'Project Not Found | Amar Choudhary Portfolio',\n            description: 'The requested project could not be found.',\n        };\n    }\n}\n\n/**\n * ProjectDetailPage displays the detailed information for a single project.\n * Fetches project data based on the slug from the URL.\n * Renders project details including description, tech stack, visuals, and links.\n * @param {{ params: { slug: string } }} props - Component props containing the project slug.\n * @returns {Promise<JSX.Element>} The project detail page component.\n */\nexport default async function ProjectDetailPage({ params }: { params: { slug: string } }) {\n  const { slug } = params;\n  try {\n    const { frontmatter, content } = await getProjectBySlug(slug);\n\n    return (\n      <article className=\"max-w-4xl mx-auto animate-fade-in\">\n        {/* Back Button */}\n        <Link href=\"/projects\" className=\"inline-flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 mb-6 transition-colors\">\n          <ArrowLeftIcon className=\"w-4 h-4 mr-1\" />\n          Back to Projects\n        </Link>\n\n        {/* Header */}\n        <h1 className=\"mb-4 text-3xl md:text-4xl lg:text-5xl\">{frontmatter.title}</h1>\n        <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-6\">\n          {frontmatter.shortDescription}\n        </p>\n\n        {/* Links & Tech Stack Row */}\n        <div className=\"flex flex-wrap items-center justify-between gap-4 mb-8 border-y py-4 dark:border-gray-700\">\n          <div className=\"flex flex-wrap gap-2\">\n            {frontmatter.technologies?.map((tech) => (\n              <Tag key={tech}>{tech}</Tag>\n            ))}\n          </div>\n          <div className=\"flex space-x-3\">\n            {frontmatter.githubUrl && (\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href={frontmatter.githubUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <CodeBracketIcon className=\"w-4 h-4 mr-1\" /> GitHub\n                </Link>\n              </Button>\n            )}\n            {frontmatter.liveDemoUrl && (\n              <Button asChild variant=\"secondary\" size=\"sm\">\n                <Link href={frontmatter.liveDemoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <LinkIcon className=\"w-4 h-4 mr-1\" /> Live Demo\n                </Link>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Optional Main Image/Video */}\n        {frontmatter.thumbnailImage && (\n            <div className=\"mb-8 rounded-lg overflow-hidden shadow-lg aspect-video relative bg-gray-200 dark:bg-gray-700\">\n                <Image\n                    src={frontmatter.thumbnailImage} // Make sure path is relative to /public or an absolute URL\n                    alt={`${frontmatter.title} visual`}\n                    fill\n                    sizes=\"(max-width: 768px) 100vw, (max-width: 1024px) 80vw, 1000px\"\n                    className=\"w-full h-full object-cover\"\n                    priority // Prioritize image loading for this page\n                />\n             </div>\n        )}\n\n        {/* Main Content Sections (Rendered from Markdown) */}\n        <div className=\"prose dark:prose-invert max-w-none lg:prose-lg\">\n            <MarkdownRenderer content={content} />\n\n            {/* Explicit Sections if not in Markdown or need special formatting */}\n            {frontmatter.roleContribution && (\n                <section className=\"mt-10 pt-6 border-t dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-semibold mb-3 !mt-0\">My Role & Contribution</h2>\n                    <p>{frontmatter.roleContribution}</p>\n                </section>\n            )}\n\n            {frontmatter.challengesLearnings && (\n                <section className=\"mt-8\">\n                    <h2 className=\"text-2xl font-semibold mb-3\">Challenges & Learnings</h2>\n                    <p>{frontmatter.challengesLearnings}</p>\n                </section>\n            )}\n        </div>\n      </article>\n    );\n  } catch (error) {\n    console.error(\"Error fetching project:\", error);\n    notFound(); // Trigger the 404 page if project not found\n  }\n}\n",
  "/src/app/projects/[slug]/loading.tsx": "/**\n * Loading component displayed while a project detail page is loading.\n * Provides a visual cue to the user that content is being fetched.\n * @returns {JSX.Element} The loading state component.\n */\nexport default function Loading() {\n    // Skeleton loader for the project detail page\n    return (\n      <div className=\"max-w-4xl mx-auto animate-pulse\">\n        {/* Back Button Skeleton */}\n        <div className=\"h-5 w-32 bg-gray-200 dark:bg-gray-700 rounded mb-6\"></div>\n\n        {/* Header Skeleton */}\n        <div className=\"h-10 w-3/4 bg-gray-300 dark:bg-gray-600 rounded mb-4\"></div>\n        <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded mb-6\"></div>\n\n        {/* Links & Tech Stack Row Skeleton */}\n        <div className=\"flex flex-wrap items-center justify-between gap-4 mb-8 border-y py-4 dark:border-gray-700\">\n          <div className=\"flex flex-wrap gap-2\">\n            <div className=\"h-6 w-16 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n            <div className=\"h-6 w-20 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n            <div className=\"h-6 w-12 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n          </div>\n          <div className=\"flex space-x-3\">\n            <div className=\"h-8 w-24 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            <div className=\"h-8 w-28 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          </div>\n        </div>\n\n        {/* Image Skeleton */}\n        <div className=\"mb-8 rounded-lg overflow-hidden shadow-lg aspect-video bg-gray-300 dark:bg-gray-600\">\n            {/* Placeholder for aspect ratio */}\n        </div>\n\n        {/* Content Skeleton */}\n        <div className=\"space-y-4\">\n          <div className=\"h-6 w-1/3 bg-gray-300 dark:bg-gray-600 rounded mb-3\"></div>\n          <div className=\"h-4 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          <div className=\"h-4 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          <div className=\"h-4 w-3/4 bg-gray-200 dark:bg-gray-700 rounded mb-6\"></div>\n\n          <div className=\"h-4 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          <div className=\"h-4 w-5/6 bg-gray-200 dark:bg-gray-700 rounded mb-6\"></div>\n\n          <div className=\"h-6 w-1/3 bg-gray-300 dark:bg-gray-600 rounded mt-8 mb-3\"></div>\n          <div className=\"h-4 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          <div className=\"h-4 w-5/6 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n",
  "/src/app/contact/page.tsx": "import ContactForm from '@/components/features/ContactForm';\nimport CalendlyEmbed from '@/components/features/CalendlyEmbed';\nimport Link from 'next/link';\nimport { EnvelopeIcon, DevicePhoneMobileIcon } from '@heroicons/react/24/outline';\nimport { FaLinkedin, FaGithub } from 'react-icons/fa'; // Using react-icons for specific brands\nimport { GITHUB_URL, LINKEDIN_URL } from '@/lib/constants'; // Import constants\n\n/**\n * ContactPage provides ways for users to get in touch.\n * Includes a contact form, Calendly embed, and social media links.\n * @returns {JSX.Element} The contact page component.\n */\nexport default function ContactPage() {\n  const calendlyUrl = process.env.NEXT_PUBLIC_CALENDLY_URL || \"\"; // Fetch from env\n\n  return (\n    <div className=\"max-w-4xl mx-auto animate-fade-in\">\n      <h1 className=\"text-center mb-8 md:mb-12\">Get In Touch</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-10 md:gap-16\">\n        {/* Left Side: Contact Form */}\n        <div className=\"bg-white dark:bg-gray-800 p-6 md:p-8 rounded-lg shadow-md order-2 md:order-1\">\n          <h2 className=\"text-2xl mb-6 flex items-center gap-2\">\n            <EnvelopeIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n            Send Me a Message\n          </h2>\n          <ContactForm />\n        </div>\n\n        {/* Right Side: Calendly & Socials */}\n        <div className=\"space-y-8 order-1 md:order-2\">\n          {/* Calendly Embed */}\n          {calendlyUrl ? (\n             <div className=\"bg-white dark:bg-gray-800 p-6 md:p-8 rounded-lg shadow-md\">\n                <h2 className=\"text-2xl mb-6 flex items-center gap-2\">\n                 <DevicePhoneMobileIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                 Book a Meeting\n                </h2>\n                <CalendlyEmbed url={calendlyUrl} />\n             </div>\n          ) : (\n              <div className=\"bg-yellow-100 dark:bg-yellow-900 border-l-4 border-yellow-500 text-yellow-700 dark:text-yellow-300 p-4 rounded-md\">\n                  <p className=\"font-bold\">Calendly Not Configured</p>\n                  <p>The booking widget is currently unavailable. Please use the contact form or social links.</p>\n                  {/* Optional: Add instruction for admin: <p>Set the NEXT_PUBLIC_CALENDLY_URL environment variable to enable.</p> */}\n              </div>\n          )}\n\n          {/* Social Links */}\n          <div className=\"text-center md:text-left\">\n            <h3 className=\"text-xl font-semibold mb-3\">Connect Elsewhere</h3>\n            <div className=\"flex justify-center md:justify-start space-x-6\">\n              {LINKEDIN_URL && (\n                <Link href={LINKEDIN_URL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 dark:text-gray-400 hover:text-blue-700 dark:hover:text-blue-500 transition-colors\">\n                  <FaLinkedin size={28} />\n                  <span className=\"sr-only\">LinkedIn</span>\n                </Link>\n              )}\n              {GITHUB_URL && (\n                <Link href={GITHUB_URL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors\">\n                  <FaGithub size={28} />\n                  <span className=\"sr-only\">GitHub</span>\n                </Link>\n              )}\n              {/* Add more social links as needed */}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "/src/app/api/contact/route.ts": "import { NextRequest, NextResponse } from 'next/server';\n\n// Define the expected structure of the request body\ninterface ContactRequestBody {\n  name?: string;\n  email?: string;\n  subject?: string;\n  message?: string;\n}\n\n/**\n * API Route handler for the contact form submission.\n * Validates input and sends data (e.g., via Formspree or an email service).\n * @param {NextRequest} req - The incoming request object.\n * @returns {Promise<NextResponse>} A response indicating success or failure.\n */\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const body: ContactRequestBody = await req.json();\n    const { name, email, subject, message } = body;\n\n    // --- Basic Server-Side Validation ---\n    if (!name?.trim() || !email?.trim() || !subject?.trim() || !message?.trim()) {\n      return NextResponse.json(\n        { success: false, message: 'Missing required fields.' },\n        { status: 400 }\n      );\n    }\n\n    // Simple email format check\n    if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      return NextResponse.json(\n        { success: false, message: 'Invalid email format.' },\n        { status: 400 }\n      );\n    }\n\n    // --- Data Sending Logic ---\n    // Option 1: Send to Formspree (Requires NEXT_PUBLIC_FORMSPREE_ENDPOINT in .env.local / environment variables)\n    const formspreeEndpoint = process.env.NEXT_PUBLIC_FORMSPREE_ENDPOINT;\n    if (formspreeEndpoint) {\n        console.log(`Forwarding contact form submission to Formspree: ${formspreeEndpoint}`);\n      try {\n          const response = await fetch(formspreeEndpoint, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n            },\n            body: JSON.stringify({ name, email, subject, message }),\n          });\n    \n          if (response.ok) {\n            console.log('Formspree submission successful');\n            return NextResponse.json({ success: true, message: 'Message sent successfully!' });\n          } else {\n            const errorData = await response.text(); // Get text for better debugging\n            console.error('Formspree error:', response.status, errorData);\n            return NextResponse.json(\n              { success: false, message: 'Could not send message. Please try again later.' },\n              { status: response.status }\n            );\n          }\n      } catch (fetchError) {\n          console.error('Error sending data to Formspree:', fetchError);\n          return NextResponse.json(\n            { success: false, message: 'Could not connect to the sending service. Please try again later.' },\n            { status: 503 } // Service Unavailable\n          );\n      }\n    }\n\n    // Option 2: Send email using Resend (Requires RESEND_API_KEY and CONTACT_EMAIL_TO)\n    /*\n    const resendApiKey = process.env.RESEND_API_KEY;\n    const emailTo = process.env.CONTACT_EMAIL_TO;\n    if (resendApiKey && emailTo) {\n      console.log('Attempting to send email via Resend...');\n      const { Resend } = require('resend');\n      const resend = new Resend(resendApiKey);\n\n      try {\n        await resend.emails.send({\n          from: 'Portfolio Contact <onboarding@resend.dev>', // Replace with your verified Resend domain/email\n          to: emailTo,\n          subject: `Portfolio Contact: ${subject}`,\n          reply_to: email,\n          html: `<p><strong>Name:</strong> ${name}</p>\n                 <p><strong>Email:</strong> ${email}</p>\n                 <p><strong>Subject:</strong> ${subject}</p>\n                 <p><strong>Message:</strong></p>\n                 <p>${message.replace(/\\n/g, '<br>')}</p>`,\n        });\n        console.log('Resend email sent successfully.');\n        return NextResponse.json({ success: true, message: 'Message sent successfully!' });\n      } catch (error) {\n        console.error('Resend error:', error);\n        return NextResponse.json(\n          { success: false, message: 'Could not send email.' },\n          { status: 500 }\n        );\n      }\n    }\n    */\n\n    // Fallback if no sending method is configured\n    console.warn('Contact form submitted, but no sending service (Formspree/Resend) is configured in environment variables.');\n    // For testing/demo purposes, return success even without sending.\n    // In a real production scenario without a configured service, you might return an error:\n    // return NextResponse.json({ success: false, message: 'Contact service not configured.' }, { status: 501 });\n    return NextResponse.json({ success: true, message: 'Form received (demo mode - no email sent).' });\n\n  } catch (error) {\n    console.error('Contact API Error:', error);\n    if (error instanceof SyntaxError) { // JSON parsing error\n        return NextResponse.json({ success: false, message: 'Invalid request format.' }, { status: 400 });\n    }\n    return NextResponse.json(\n      { success: false, message: 'An unexpected error occurred on the server.' },\n      { status: 500 }\n    );\n  }\n}\n",
  "/src/components/ui/Button.tsx": "import React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n// Define button variants using CVA\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 transform active:scale-95',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 shadow hover:shadow-md',\n        secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600 shadow-sm hover:shadow',\n        outline: 'border border-gray-300 bg-white hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100 dark:hover:bg-gray-700 shadow-sm hover:shadow',\n        ghost: 'hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-gray-700 dark:text-gray-300 dark:hover:text-white',\n        link: 'text-blue-600 underline-offset-4 hover:underline dark:text-blue-400',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8 text-base',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'default',\n    },\n  }\n);\n\n// Define props interface, extending standard button attributes and adding CVA variants\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean; // Allows rendering as a child component (e.g., Link)\n}\n\n/**\n * Button Component: A versatile button component with predefined styles and sizes.\n * Built using class-variance-authority (CVA) for easy customization and Tailwind CSS for styling.\n * Supports rendering as a child element (e.g., wrapping a Next.js Link) via the `asChild` prop.\n *\n * @param {string} [variant=primary] - The style variant (primary, secondary, outline, ghost, link).\n * @param {string} [size=default] - The size variant (default, sm, lg, icon).\n * @param {boolean} [asChild=false] - If true, renders the component as a Slot, merging props onto the immediate child.\n * @param {string} [className] - Additional CSS classes to apply.\n * @param {React.ReactNode} children - The content inside the button.\n * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} ...props - Standard HTML button attributes.\n * @returns {JSX.Element} The rendered button component.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n",
  "/src/components/ui/Card.tsx": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Card Component: A container component with predefined card styling.\n * Provides a visually distinct area for content.\n *\n * @param {string} [className] - Additional CSS classes for the card container.\n * @param {React.HTMLAttributes<HTMLDivElement>} ...props - Standard HTML div attributes.\n * @returns {JSX.Element} The rendered card container.\n */\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'rounded-lg border border-gray-200 bg-white text-gray-900 shadow-sm',\n        'dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nCard.displayName = 'Card';\n\n/**\n * CardHeader Component: Defines the header section of a Card.\n *\n * @param {string} [className] - Additional CSS classes for the header.\n * @param {React.HTMLAttributes<HTMLDivElement>} ...props - Standard HTML div attributes.\n * @returns {JSX.Element} The rendered card header.\n */\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />\n  )\n);\nCardHeader.displayName = 'CardHeader';\n\n/**\n * CardTitle Component: Defines the title within a CardHeader.\n * Typically uses an h3 tag but can be customized.\n *\n * @param {string} [className] - Additional CSS classes for the title.\n * @param {React.HTMLAttributes<HTMLHeadingElement>} ...props - Standard HTML heading attributes.\n * @returns {JSX.Element} The rendered card title.\n */\nconst CardTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(\n    ({ className, ...props }, ref) => (\n      <h3\n        ref={ref}\n        className={cn('text-lg font-semibold leading-none tracking-tight', className)} // Removed mb-1 to allow spacing control in parent\n        {...props}\n      />\n    )\n);\nCardTitle.displayName = 'CardTitle';\n\n/**\n * CardDescription Component: Defines the description text within a CardHeader.\n *\n * @param {string} [className] - Additional CSS classes for the description.\n * @param {React.HTMLAttributes<HTMLParagraphElement>} ...props - Standard HTML paragraph attributes.\n * @returns {JSX.Element} The rendered card description.\n */\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p ref={ref} className={cn('text-sm text-gray-500 dark:text-gray-400', className)} {...props} />\n));\nCardDescription.displayName = 'CardDescription';\n\n/**\n * CardContent Component: Defines the main content area of a Card.\n *\n * @param {string} [className] - Additional CSS classes for the content area.\n * @param {React.HTMLAttributes<HTMLDivElement>} ...props - Standard HTML div attributes.\n * @returns {JSX.Element} The rendered card content area.\n */\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('p-6 pt-0', className)} {...props} /> // Removed pt-0 to allow padding control\n  )\n);\nCardContent.displayName = 'CardContent';\n\n/**\n * CardFooter Component: Defines the footer section of a Card.\n *\n * @param {string} [className] - Additional CSS classes for the footer.\n * @param {React.HTMLAttributes<HTMLDivElement>} ...props - Standard HTML div attributes.\n * @returns {JSX.Element} The rendered card footer.\n */\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} /> // Removed pt-0 for consistency\n  )\n);\nCardFooter.displayName = 'CardFooter';\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n",
  "/src/components/ui/Input.tsx": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\n/**\n * Input Component: A basic styled input field.\n *\n * @param {string} [className] - Additional CSS classes.\n * @param {string} [type] - Input type (e.g., text, email, password).\n * @param {React.InputHTMLAttributes<HTMLInputElement>} ...props - Standard HTML input attributes.\n * @returns {JSX.Element} The rendered input field.\n */\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white',\n          'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n          'placeholder:text-gray-500 dark:placeholder:text-gray-400',\n          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2',\n          'disabled:cursor-not-allowed disabled:opacity-50',\n          'dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:ring-offset-gray-900 dark:focus-visible:ring-blue-500',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input };\n",
  "/src/components/ui/Textarea.tsx": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\n/**\n * Textarea Component: A basic styled textarea field.\n *\n * @param {string} [className] - Additional CSS classes.\n * @param {React.TextareaHTMLAttributes<HTMLTextAreaElement>} ...props - Standard HTML textarea attributes.\n * @returns {JSX.Element} The rendered textarea field.\n */\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white',\n          'placeholder:text-gray-500 dark:placeholder:text-gray-400',\n          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2',\n          'disabled:cursor-not-allowed disabled:opacity-50',\n          'dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:ring-offset-gray-900 dark:focus-visible:ring-blue-500',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n",
  "/src/components/ui/Tag.tsx": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface TagProps extends React.HTMLAttributes<HTMLSpanElement> {}\n\n/**\n * Tag Component: Displays text content within a styled tag.\n * Useful for keywords, categories, or technologies.\n *\n * @param {string} [className] - Additional CSS classes.\n * @param {React.HTMLAttributes<HTMLSpanElement>} ...props - Standard HTML span attributes.\n * @returns {JSX.Element} The rendered tag component.\n */\nconst Tag = React.forwardRef<HTMLSpanElement, TagProps>(({ className, ...props }, ref) => {\n  return (\n    <span\n      ref={ref}\n      className={cn(\n        'inline-block rounded-full bg-blue-100 px-3 py-1 text-xs font-semibold text-blue-800',\n        'dark:bg-blue-900/50 dark:text-blue-200',\n        className\n      )}\n      {...props}\n    />\n  );\n});\nTag.displayName = 'Tag';\n\nexport { Tag };\n",
  "/src/components/ui/MarkdownRenderer.tsx": "import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Link from 'next/link';\n\n/**\n * Props for the MarkdownRenderer component.\n */\ninterface MarkdownRendererProps {\n  content: string; // The Markdown string content to render.\n  className?: string; // Optional additional class names for the container.\n}\n\n/**\n * MarkdownRenderer Component: Renders Markdown content as HTML using react-markdown.\n * Applies Tailwind Typography plugin styles (`prose`) for readability.\n * Overrides link rendering to use Next.js Link for internal links.\n *\n * @param {string} content - The Markdown content to be rendered.\n * @param {string} [className] - Optional additional class names for the container.\n * @returns {JSX.Element} The rendered HTML from Markdown.\n */\nconst MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content, className = '' }) => {\n  return (\n    <ReactMarkdown\n      className={`prose dark:prose-invert max-w-none lg:prose-lg ${className}`}\n      components={{\n        // Override default anchor tag rendering\n        a: ({ node, ...props }) => {\n          // Check if the link is internal (starts with '/') or external\n          if (props.href && props.href.startsWith('/')) {\n            return <Link href={props.href} {...props} />; // Use Next.js Link for internal links\n          }\n          // Use standard anchor tag for external links, adding security attributes\n          return <a target=\"_blank\" rel=\"noopener noreferrer\" {...props} />;\n        },\n        // Add other component overrides if needed (e.g., images, code blocks)\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n};\n\nexport default MarkdownRenderer;\n",
  "/src/components/layout/Navbar.tsx": "'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { useState, useEffect } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Bars3Icon, XMarkIcon, CodeBracketSquareIcon } from '@heroicons/react/24/outline'; // Added site icon\n\n/**\n * Represents a navigation link item.\n */\ninterface NavLink {\n  href: string;\n  label: string;\n}\n\nconst navLinks: NavLink[] = [\n  { href: '/', label: 'Home' },\n  { href: '/about', label: 'About' },\n  { href: '/skills', label: 'Skills' },\n  { href: '/projects', label: 'Projects' },\n  { href: '/contact', label: 'Contact' },\n];\n\n/**\n * Navbar Component: Displays the main site navigation.\n * Includes site title/logo, navigation links, and handles mobile menu toggle.\n * Highlights the active navigation link based on the current path.\n * Adds a subtle shadow on scroll.\n * @returns {JSX.Element} The navigation bar component.\n */\nexport default function Navbar() {\n  const pathname = usePathname();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [hasScrolled, setHasScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setHasScrolled(window.scrollY > 10);\n    };\n    window.addEventListener('scroll', handleScroll);\n    // Initial check in case page loads already scrolled\n    handleScroll();\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  // Close mobile menu on path change\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n  }, [pathname]);\n\n  return (\n    <nav\n      className={cn(\n        'bg-white/80 dark:bg-gray-900/80 backdrop-blur-md sticky top-0 z-50 transition-shadow duration-300',\n        hasScrolled ? 'shadow-md' : 'shadow-none'\n      )}\n    >\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo/Site Title */}\n          <Link href=\"/\" className=\"flex items-center gap-2 text-xl font-bold text-blue-600 dark:text-blue-400 hover:opacity-80 transition-opacity\">\n             <CodeBracketSquareIcon className=\"w-6 h-6\"/> {/* Site Icon */}\n             <span>Amar Choudhary</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-1 lg:space-x-2\">\n            {navLinks.map((link) => {\n              const isActive = (pathname === link.href) || (link.href !== '/' && pathname.startsWith(link.href + '/')) || (link.href === '/projects' && pathname.startsWith('/projects/'));\n              return (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={cn(\n                    'px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 relative',\n                    isActive\n                      ? 'text-blue-700 dark:text-blue-300'\n                      : 'text-gray-700 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400',\n                     'after:content-[\"\"] after:absolute after:left-3 after:right-3 after:bottom-1 after:h-0.5 after:bg-blue-600 dark:after:bg-blue-400 after:transition-transform after:duration-200 after:ease-out',\n                     isActive ? 'after:scale-x-100' : 'after:scale-x-0 hover:after:scale-x-100'\n                  )}\n                  aria-current={isActive ? 'page' : undefined}\n                >\n                  {link.label}\n                </Link>\n              );\n            })}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden flex items-center\">\n            <button\n              onClick={toggleMobileMenu}\n              className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\n              aria-controls=\"mobile-menu\"\n              aria-expanded={isMobileMenuOpen}\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              {isMobileMenuOpen ? (\n                <XMarkIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n              ) : (\n                <Bars3Icon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu Panel - Animate slide down */}\n      <div\n        id=\"mobile-menu\"\n        className={cn(\n            'md:hidden absolute inset-x-0 top-full z-40 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 shadow-lg overflow-hidden transition-all duration-300 ease-in-out',\n            isMobileMenuOpen ? 'max-h-screen opacity-100' : 'max-h-0 opacity-0'\n        )}\n      >\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            {navLinks.map((link) => {\n              const isActive = (pathname === link.href) || (link.href !== '/' && pathname.startsWith(link.href + '/')) || (link.href === '/projects' && pathname.startsWith('/projects/'));\n              return (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  onClick={toggleMobileMenu} // Close menu on click\n                  className={cn(\n                    'block px-3 py-2 rounded-md text-base font-medium transition-colors',\n                    isActive\n                      ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200'\n                      : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'\n                  )}\n                  aria-current={isActive ? 'page' : undefined}\n                >\n                  {link.label}\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n    </nav>\n  );\n}\n",
  "/src/components/layout/Footer.tsx": "import Link from 'next/link';\nimport { FaLinkedin, FaGithub } from 'react-icons/fa'; // Using react-icons for specific brands\nimport { GITHUB_URL, LINKEDIN_URL } from '@/lib/constants';\n\n/**\n * Footer Component: Displays copyright information and relevant links.\n * Includes social media links from constants.\n * @returns {JSX.Element} The footer component.\n */\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-gray-100 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-16 py-8\">\n      <div className=\"container mx-auto px-4 text-center text-gray-600 dark:text-gray-400\">\n        <div className=\"flex justify-center space-x-6 mb-4\">\n          {LINKEDIN_URL && (\n              <Link href={LINKEDIN_URL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 dark:text-gray-400 hover:text-blue-700 dark:hover:text-blue-500 transition-colors duration-200\" aria-label=\"LinkedIn Profile\">\n                <FaLinkedin size={24} />\n                <span className=\"sr-only\">LinkedIn</span>\n              </Link>\n          )}\n          {GITHUB_URL && (\n              <Link href={GITHUB_URL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-200\" aria-label=\"GitHub Profile\">\n                <FaGithub size={24} />\n                <span className=\"sr-only\">GitHub</span>\n              </Link>\n          )}\n          {/* Add other social links as needed, potentially from constants */}\n        </div>\n        <p className=\"text-sm\">\n          &copy; {currentYear} Amar Choudhary. All rights reserved.\n        </p>\n        {/* Optional: Add link to privacy policy or terms if needed */}\n      </div>\n    </footer>\n  );\n}\n",
  "/src/components/features/ProjectCard.tsx": "import Image from 'next/image';\nimport Link from 'next/link';\nimport { Project } from '@/types/project';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Tag } from '@/components/ui/Tag';\nimport { ArrowRightIcon, CodeBracketIcon, LinkIcon } from '@heroicons/react/24/outline';\n\n/**\n * Props for the ProjectCard component.\n */\ninterface ProjectCardProps {\n  project: Project;\n}\n\n/**\n * ProjectCard Component: Displays a summary of a project in a card format.\n * Includes title, description, technologies, thumbnail, and links to details/demo/repo.\n *\n * @param {Project} project - The project data object.\n * @returns {JSX.Element} The rendered project card component.\n */\nconst ProjectCard: React.FC<ProjectCardProps> = ({ project }) => {\n  const { slug, frontmatter } = project;\n\n  return (\n    <Card className=\"flex flex-col h-full overflow-hidden bg-white dark:bg-gray-800 shadow-md hover:shadow-xl transition-shadow duration-300 ease-in-out rounded-lg\">\n      {/* Project Thumbnail */}\n      {frontmatter.thumbnailImage ? (\n        <Link href={`/projects/${slug}`} className=\"block aspect-video overflow-hidden relative group\">\n          <Image\n            src={frontmatter.thumbnailImage} // Ensure path is relative to /public or an absolute URL\n            alt={`${frontmatter.title} thumbnail`}\n            fill\n            sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n            className=\"object-cover transition-transform duration-300 ease-in-out group-hover:scale-105\"\n          />\n        </Link>\n      ) : (\n        // Placeholder if no image\n        <div className=\"aspect-video bg-gray-200 dark:bg-gray-700 flex items-center justify-center\">\n          <CodeBracketIcon className=\"w-12 h-12 text-gray-400 dark:text-gray-500\" />\n        </div>\n      )}\n\n      <CardHeader className=\"pb-2 pt-4\">\n        <CardTitle className=\"text-xl lg:text-2xl\">\n            <Link href={`/projects/${slug}`} className=\"hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 line-clamp-2\">\n                {frontmatter.title}\n            </Link>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex-grow pt-0 pb-4\">\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3\">\n          {frontmatter.shortDescription}\n        </p>\n        <div className=\"flex flex-wrap gap-1.5\">\n          {frontmatter.technologies?.slice(0, 4).map((tech) => (\n            <Tag key={tech}>{tech}</Tag>\n          ))}\n          {frontmatter.technologies && frontmatter.technologies.length > 4 && (\n            <Tag>+ {frontmatter.technologies.length - 4} more</Tag>\n          )}\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-wrap justify-between items-center gap-2 pt-4 mt-auto border-t border-gray-100 dark:border-gray-700\">\n        {/* Details Link */}\n        <Button asChild variant=\"link\" className=\"p-0 h-auto text-sm font-semibold\">\n          <Link href={`/projects/${slug}`}>\n            View Details <ArrowRightIcon className=\"ml-1 w-4 h-4\" />\n          </Link>\n        </Button>\n\n        {/* External Links */}\n        <div className=\"flex space-x-1\">\n            {frontmatter.githubUrl && (\n              <Button asChild variant=\"ghost\" size=\"icon\" className=\"w-8 h-8 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white\" title=\"GitHub Repository\">\n                <Link href={frontmatter.githubUrl} target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"GitHub Repository\">\n                  <CodeBracketIcon className=\"w-5 h-5\" />\n                </Link>\n              </Button>\n            )}\n            {frontmatter.liveDemoUrl && (\n              <Button asChild variant=\"ghost\" size=\"icon\" className=\"w-8 h-8 text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400\" title=\"Live Demo\">\n                <Link href={frontmatter.liveDemoUrl} target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Live Demo\">\n                  <LinkIcon className=\"w-5 h-5\" />\n                </Link>\n              </Button>\n            )}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default ProjectCard;\n",
  "/src/components/features/ProjectList.tsx": "import { Project } from '@/types/project';\nimport ProjectCard from './ProjectCard';\n\n/**\n * Props for the ProjectList component.\n */\ninterface ProjectListProps {\n  projects: Project[];\n}\n\n/**\n * ProjectList Component: Renders a grid of ProjectCard components.\n *\n * @param {Project[]} projects - An array of project data objects.\n * @returns {JSX.Element} The rendered list of project cards.\n */\nconst ProjectList: React.FC<ProjectListProps> = ({ projects }) => {\n  if (!projects || projects.length === 0) {\n    return <p className=\"text-center text-gray-500 dark:text-gray-400 mt-8\">No projects available at the moment. Check back soon!</p>;\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8\">\n      {projects.map((project) => (\n        <ProjectCard key={project.slug} project={project} />\n      ))}\n    </div>\n  );\n};\n\nexport default ProjectList;\n",
  "/src/components/features/SkillList.tsx": "// This component might not be strictly necessary if the Skills page handles rendering directly.\n// However, it could be useful if you want a reusable component to display skills elsewhere.\n\nimport { Skill } from '@/types/skill';\nimport { Tag } from '@/components/ui/Tag';\n\n/**\n * Props for the SkillList component.\n */\ninterface SkillListProps {\n  skills: Skill[];\n  title?: string;\n}\n\n/**\n * SkillList Component: Renders a list of skills, often as tags.\n * Can be used to display skills within project details or other sections.\n *\n * @param {Skill[]} skills - An array of skill objects.\n * @param {string} [title] - An optional title for the skill list section.\n * @returns {JSX.Element | null} The rendered list of skills or null if no skills provided.\n */\nconst SkillList: React.FC<SkillListProps> = ({ skills, title }) => {\n  if (!skills || skills.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      {title && <h3 className=\"text-lg font-semibold mb-3\">{title}</h3>}\n      <div className=\"flex flex-wrap gap-2\">\n        {skills.map((skill) => (\n          <Tag key={skill.name}>{skill.name}</Tag>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SkillList;\n",
  "/src/components/features/ContactForm.tsx": "'use client';\n\nimport { useState, FormEvent } from 'react';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { CheckCircleIcon, ExclamationCircleIcon, ArrowPathIcon } from '@heroicons/react/24/outline';\n\n/**\n * Defines the state of the contact form submission.\n */\ntype FormStatus = 'idle' | 'submitting' | 'success' | 'error';\n\n/**\n * ContactForm Component: Provides a form for users to send messages.\n * Handles form input state, submission, and displays status messages.\n * Sends data to the `/api/contact` endpoint.\n * @returns {JSX.Element} The contact form component.\n */\nconst ContactForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n  const [status, setStatus] = useState<FormStatus>('idle');\n  const [formMessage, setFormMessage] = useState('');\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setStatus('submitting');\n    setFormMessage('');\n\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, subject, message }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        setStatus('success');\n        setFormMessage(result.message || 'Message sent successfully!');\n        // Clear form after a short delay to allow user to see the success message\n        setTimeout(() => {\n            setName('');\n            setEmail('');\n            setSubject('');\n            setMessage('');\n            // Optionally reset status to idle after clearing\n            // setStatus('idle');\n            // setFormMessage('');\n        }, 3000);\n      } else {\n        setStatus('error');\n        setFormMessage(result.message || 'An error occurred. Please try again.');\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      setStatus('error');\n      setFormMessage('An unexpected network error occurred. Please check your connection and try again.');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-5\">\n      {/* Status Messages */}\n      {formMessage && (\n        <div\n          className={`flex items-center p-4 text-sm rounded-lg ${
            status === 'success'\n              ? 'text-green-800 bg-green-100 dark:bg-green-900 dark:text-green-300'\n              : status === 'error'\n              ? 'text-red-800 bg-red-100 dark:bg-red-900 dark:text-red-300'\n              : '' // Should not appear in 'submitting' or 'idle' with message\n          }`}\n          role={status === 'success' ? 'status' : 'alert'}\n        >\n          {status === 'success' && <CheckCircleIcon className=\"w-5 h-5 mr-2 flex-shrink-0\" />}\n          {status === 'error' && <ExclamationCircleIcon className=\"w-5 h-5 mr-2 flex-shrink-0\" />}\n          <span className=\"font-medium\">{status === 'success' ? 'Success!' : status === 'error' ? 'Error!' : ''}</span>\n          <span className=\"ml-1\">{formMessage}</span>\n        </div>\n      )}\n\n      {/* Form Fields */}\n      <div>\n        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Name <span className=\"text-red-500\">*</span>\n        </label>\n        <Input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n          disabled={status === 'submitting' || status === 'success'}\n          placeholder=\"Your Name\"\n          aria-required=\"true\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Email <span className=\"text-red-500\">*</span>\n        </label>\n        <Input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          disabled={status === 'submitting' || status === 'success'}\n          placeholder=\"your.email@example.com\"\n          aria-required=\"true\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"subject\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Subject <span className=\"text-red-500\">*</span>\n        </label>\n        <Input\n          type=\"text\"\n          id=\"subject\"\n          name=\"subject\"\n          value={subject}\n          onChange={(e) => setSubject(e.target.value)}\n          required\n          disabled={status === 'submitting' || status === 'success'}\n          placeholder=\"Regarding...\"\n          aria-required=\"true\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Message <span className=\"text-red-500\">*</span>\n        </label>\n        <Textarea\n          id=\"message\"\n          name=\"message\"\n          rows={5}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          required\n          disabled={status === 'submitting' || status === 'success'}\n          placeholder=\"Your message here...\"\n          aria-required=\"true\"\n        />\n      </div>\n      <div>\n        <Button type=\"submit\" variant=\"primary\" size=\"lg\" disabled={status === 'submitting' || status === 'success'} className=\"w-full md:w-auto\">\n          {status === 'submitting' ? (\n            <>\n              <ArrowPathIcon className=\"animate-spin h-5 w-5 mr-2\" />\n              Sending...\n            </>\n          ) : status === 'success' ? (\n            <>\n             <CheckCircleIcon className=\"h-5 w-5 mr-2\" />\n              Message Sent!\n            </>\n          ) : (\n            'Send Message'\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;\n",
  "/src/components/features/CalendlyEmbed.tsx": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { InlineWidget, useCalendlyEventListener } from 'react-calendly';\nimport { CalendarDaysIcon } from '@heroicons/react/24/outline';\n\n/**\n * Props for the CalendlyEmbed component.\n */\ninterface CalendlyEmbedProps {\n  url: string; // The full Calendly scheduling link.\n}\n\n/**\n * CalendlyEmbed Component: Embeds the Calendly inline widget.\n * Requires the Calendly URL to be passed as a prop.\n * Includes loading state and handles potential errors.\n *\n * @param {string} url - The Calendly scheduling URL.\n * @returns {JSX.Element} The Calendly widget embed.\n */\nconst CalendlyEmbed: React.FC<CalendlyEmbedProps> = ({ url }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isClient, setIsClient] = useState(false);\n\n  // Ensure component only renders on the client where window is available\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Listen for Calendly events (optional)\n  useCalendlyEventListener({\n    onProfilePageViewed: () => console.log('Calendly: Profile Page Viewed'),\n    onDateAndTimeSelected: () => console.log('Calendly: Date & Time Selected'),\n    onEventTypeViewed: () => {\n        console.log('Calendly: Event Type Viewed');\n        setIsLoading(false); // Consider loaded when event type shows\n    },\n    onEventScheduled: (e) => {\n        console.log('Calendly: Event Scheduled', e.data.payload);\n        // You could show a confirmation message here\n    },\n  });\n\n  if (!isClient) {\n    // Render a placeholder or null on the server\n    return (\n        <div className=\"min-h-[650px] w-full bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center\">\n            <CalendarDaysIcon className=\"w-12 h-12 text-gray-400 dark:text-gray-500 animate-pulse\" />\n        </div>\n    );\n  }\n\n  if (!url) {\n    console.warn('Calendly URL is missing.');\n    return (\n        <div className=\"min-h-[200px] w-full bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-700 rounded-lg flex flex-col items-center justify-center text-center p-4\">\n            <CalendarDaysIcon className=\"w-10 h-10 text-red-500 mb-2\" />\n            <p className='text-red-700 dark:text-red-300 font-semibold'>Booking Unavailable</p>\n            <p className='text-red-600 dark:text-red-400 text-sm'>The scheduling link is not configured.</p>\n        </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-[650px] h-[650px] w-full relative rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-gray-100 dark:bg-gray-700 flex items-center justify-center z-10\">\n          <CalendarDaysIcon className=\"w-12 h-12 text-gray-400 dark:text-gray-500 animate-pulse\" />\n          <span className=\"sr-only\">Loading Booking Calendar...</span>\n        </div>\n      )}\n      <InlineWidget\n          url={url}\n          styles={{\n              height: '100%',\n              width: '100%',\n              border: 'none',\n              position: 'absolute',\n              top: '0', left: '0',\n          }}\n          // Optional: Pre-fill info if user data is available\n          // prefill={{\n          //   email: 'test@example.com',\n          //   firstName: 'Jon',\n          //   lastName: 'Snow',\n          //   name: 'Jon Snow',\n          // }}\n          // Optional: Pass UTM parameters\n          // utm={{\n          //   utmCampaign: 'Portfolio',\n          //   utmSource: 'ContactPage',\n          //   utmMedium: 'Web',\n          // }}\n          // Optional: Page settings for theming (check Calendly docs for current options)\n          // pageSettings={{\n          //    hideEventTypeDetails: false,\n          //    hideLandingPageDetails: false,\n          //    primaryColor: '2563eb', // Blue-600\n          //    textColor: '1f2937' // Gray-800\n          //    // backgroundColor: 'ffffff' // White\n          // }}\n          onLoad={() => setIsLoading(false)} // Fallback loading state handler\n      />\n    </div>\n  );\n};\n\nexport default CalendlyEmbed;\n",
  "/src/components/providers/ThemeProvider.tsx": "// Placeholder for ThemeProvider if needed in the future.\n// For now, theme switching can be handled with Tailwind's dark: prefix\n// and potentially a simple state + localStorage in the RootLayout or a dedicated context.\n\n// Example structure if implementing a theme toggle:\n/*\n'use client';\n\nimport React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    // Check for saved theme in localStorage or use system preference\n    const storedTheme = localStorage.getItem('theme') as Theme | null;\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const initialTheme = storedTheme || (prefersDark ? 'dark' : 'light');\n\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n\n  }, []);\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => {\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\n      localStorage.setItem('theme', newTheme);\n      document.documentElement.classList.toggle('dark', newTheme === 'dark');\n      return newTheme;\n    });\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n*/\n\nexport {}; // Export empty object to make it a module\n",
  "/src/lib/content.ts": "import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport { Project, ProjectFrontmatter } from '@/types/project';\nimport { Skill } from '@/types/skill';\nimport { AboutContent, AboutFrontmatter } from '@/types/about';\n// import { remark } from 'remark';\n// import html from 'remark-html'; // Use if converting Markdown to HTML server-side\n\n// Determine the base directory for content\n// Use process.cwd() which points to the root of the Next.js project\nconst baseDirectory = process.cwd();\nconst contentDirectory = path.join(baseDirectory, 'src', 'data');\nconst projectsDirectory = path.join(contentDirectory, 'projects');\nconst skillsFilePath = path.join(contentDirectory, 'skills.json');\nconst aboutFilePath = path.join(contentDirectory, 'about.mdx'); // Assuming MDX or MD\n\n/**\n * Gets the slugs (filenames without extension) of all projects.\n * Reads the projects directory and filters for .md or .mdx files.\n * @returns {string[]} An array of project slugs.\n */\nexport function getAllProjectSlugs(): string[] {\n  try {\n    if (!fs.existsSync(projectsDirectory)) {\n        console.warn(`Projects directory not found: ${projectsDirectory}`);\n        return [];\n    }\n    const fileNames = fs.readdirSync(projectsDirectory);\n    return fileNames\n        .filter(fileName => fileName.endsWith('.md') || fileName.endsWith('.mdx'))\n        .map((fileName) => fileName.replace(/\\.(md|mdx)$/, ''));\n  } catch (error) {\n    console.error('Error reading projects directory:', projectsDirectory, error);\n    return [];\n  }\n}\n\n/**\n * Fetches the content and frontmatter for a single project by its slug.\n * Handles both .md and .mdx extensions.\n * @param {string} slug - The slug of the project.\n * @returns {Promise<Project>} A promise resolving to the project data.\n * @throws {Error} If the project file is not found or cannot be read.\n */\nexport async function getProjectBySlug(slug: string): Promise<Project> {\n  const possibleExtensions = ['.mdx', '.md'];\n  let fullPath = '';\n  let fileExists = false;\n\n  for (const ext of possibleExtensions) {\n      const testPath = path.join(projectsDirectory, `${slug}${ext}`);\n      try {\n          if (fs.existsSync(testPath)) {\n              fullPath = testPath;\n              fileExists = true;\n              break;\n          }\n      } catch (err) {\n          // Catch errors during existsSync, though typically it just returns false\n          console.error(`Error checking file existence for ${testPath}:`, err);\n          continue;\n      }\n  }\n\n  if (!fileExists) {\n    console.error(`Project file not found for slug: ${slug} in ${projectsDirectory}`);\n    throw new Error(`Project file not found for slug: ${slug}`);\n  }\n\n  try {\n      const fileContents = fs.readFileSync(fullPath, 'utf8');\n      const { data, content } = matter(fileContents);\n    \n      // Optionally process markdown content to HTML here if needed server-side\n      // const processedContent = await remark().use(html).process(content);\n      // const contentHtml = processedContent.toString();\n    \n      return {\n        slug,\n        frontmatter: data as ProjectFrontmatter,\n        content: content, // Return raw Markdown content for client-side rendering (e.g., react-markdown)\n        // contentHtml: contentHtml // Or return processed HTML\n      };\n  } catch (error) {\n      console.error(`Error reading or parsing project file ${fullPath}:`, error);\n      throw new Error(`Could not read project file for slug: ${slug}`);\n  }\n}\n\n/**\n * Fetches metadata (frontmatter) and slug for all projects.\n * Sorts projects based on the 'order' frontmatter field (ascending).\n * @returns {Promise<Project[]>} A promise resolving to an array of project data (without full content).\n */\nexport async function getAllProjects(): Promise<Project[]> {\n  const slugs = getAllProjectSlugs();\n  if (slugs.length === 0) return [];\n\n  try {\n      const allProjectsData = await Promise.all(\n        slugs.map(async (slug) => {\n          // Fetch only frontmatter initially for performance\n          const { frontmatter } = await getProjectBySlug(slug);\n          return {\n            slug,\n            frontmatter,\n            content: '', // Keep content minimal for list view\n          };\n        })\n      );\n    \n      // Sort projects by order if specified, otherwise keep filesystem order (which can be unpredictable)\n      // Projects without an order field are placed at the end.\n      return allProjectsData.sort((a, b) =>\n         (a.frontmatter.order ?? Number.MAX_SAFE_INTEGER) - (b.frontmatter.order ?? Number.MAX_SAFE_INTEGER)\n      );\n  } catch (error) {\n      console.error('Error fetching all projects:', error);\n      return []; // Return empty array on error\n  }\n}\n\n/**\n * Fetches the list of skills from skills.json.\n * @returns {Promise<Skill[]>} A promise resolving to an array of skill objects.\n */\nexport async function getSkills(): Promise<Skill[]> {\n  try {\n    if (!fs.existsSync(skillsFilePath)) {\n      console.warn('Skills file not found:', skillsFilePath);\n      return [];\n    }\n    const fileContents = fs.readFileSync(skillsFilePath, 'utf8');\n    const skills: Skill[] = JSON.parse(fileContents);\n    return skills;\n  } catch (error) {\n    console.error('Error reading or parsing skills file:', skillsFilePath, error);\n    return [];\n  }\n}\n\n/**\n * Fetches the content and frontmatter for the About page.\n * @returns {Promise<AboutContent>} A promise resolving to the about page data.\n * @throws {Error} If the about file is not found or cannot be read.\n */\nexport async function getAboutContent(): Promise<AboutContent> {\n  try {\n      if (!fs.existsSync(aboutFilePath)) {\n        console.error('About file not found:', aboutFilePath);\n        throw new Error('About file not found');\n      }\n    \n      const fileContents = fs.readFileSync(aboutFilePath, 'utf8');\n      const { data, content } = matter(fileContents);\n    \n      // Optionally process markdown content here if needed\n    \n      return {\n        frontmatter: data as AboutFrontmatter,\n        content: content,\n      };\n  } catch (error) {\n      console.error(`Error reading or parsing about file ${aboutFilePath}:`, error);\n      throw new Error('Could not read about page content');\n  }\n}\n",
  "/src/lib/hooks/useScrollspy.ts": "// Placeholder for a potential custom hook (e.g., useScrollspy for active nav link highlighting on scroll).\n// Example implementation (basic):\n\nimport { useState, useEffect, useRef } from 'react';\n\n/**\n * Options for the useScrollspy hook.\n */\ninterface ScrollspyOptions extends IntersectionObserverInit {\n    offset?: number; // Additional offset from the top\n}\n\n/**\n * Custom hook to detect which section is currently visible in the viewport.\n *\n * @param {string[]} selectors - An array of CSS selectors for the sections to observe.\n * @param {ScrollspyOptions} [options] - Options for the IntersectionObserver.\n * @returns {string | null} The ID of the currently active section, or null.\n */\nexport function useScrollspy(selectors: string[], options?: ScrollspyOptions): string | null {\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const observer = useRef<IntersectionObserver | null>(null);\n  const elementsRef = useRef<Map<Element, string>>(new Map());\n\n  useEffect(() => {\n    // Disconnect previous observer if selectors or options change\n    observer.current?.disconnect();\n    elementsRef.current.clear();\n\n    const rootMargin = `-${options?.offset ?? 0}px 0px 0px 0px`;\n    const observerOptions = { ...options, rootMargin };\n\n    const elements = selectors\n      .map(selector => document.querySelector(selector))\n      .filter((el): el is Element => el !== null && el.id !== '');\n\n    if (elements.length === 0) return;\n\n    observer.current = new IntersectionObserver((entries) => {\n      let bestMatch: IntersectionObserverEntry | null = null;\n\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            // Prioritize entries that are fully visible or closer to the top\n            if (!bestMatch || entry.intersectionRatio > bestMatch.intersectionRatio) {\n                bestMatch = entry;\n            }\n        }\n      });\n\n      if (bestMatch) {\n          setActiveId(bestMatch.target.id);\n      } else {\n          // Optional: Determine if scrolling up or down to keep the last active element briefly\n          // Or simply set to null if nothing is intersecting based on the rootMargin\n          // For simplicity, let's find the topmost element if nothing is directly intersecting\n          const topmostVisible = entries\n            .filter(e => e.boundingClientRect.bottom > (options?.offset ?? 0))\n            .sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top)[0];\n\n          if(topmostVisible) {\n              setActiveId(topmostVisible.target.id);\n          } else {\n            // setActiveId(null); // Can cause flickering, might be better to keep last active\n          }\n      }\n    }, observerOptions);\n\n    elements.forEach(el => {\n      elementsRef.current.set(el, el.id);\n      observer.current?.observe(el);\n    });\n\n    // Cleanup function\n    return () => {\n        observer.current?.disconnect();\n        elementsRef.current.clear();\n    }\n  }, [selectors, options]); // Re-run effect if selectors or options change\n\n  return activeId;\n}\n",
  "/src/lib/utils.ts": "import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines multiple class names or class value arrays into a single string,\n * resolving Tailwind CSS class conflicts using tailwind-merge.\n *\n * Example: cn('p-4', 'bg-red-500', { 'text-white': true }, ['m-2'])\n *\n * @param {...ClassValue[]} inputs - Class names, objects, or arrays of class names.\n * @returns {string} A merged and optimized string of Tailwind CSS classes.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
  "/src/lib/constants.ts": "// Site-wide constants\n\nexport const SITE_TITLE = 'Amar Choudhary | AI & Data Science Portfolio';\nexport const SITE_DESCRIPTION = 'Portfolio of Amar Choudhary, showcasing expertise and projects in Machine Learning, Generative AI, and Data Science.';\n\n// Social media and contact links (ensure these are correct)\nexport const LINKEDIN_URL = 'https://linkedin.com/in/amar-choudhary-profile'; // Replace with actual profile URL\nexport const GITHUB_URL = 'https://github.com/AmarChoudhary-ai'; // Replace with actual profile URL\nexport const CONTACT_EMAIL = 'amar.choudhary.email@example.com'; // Optional: Display email (replace with actual)\n\n// Default values or configuration\nexport const PROJECTS_PER_PAGE = 6; // Example if pagination was needed\n",
  "/src/data/projects/adb-script-converter.mdx": "---\ntitle: 'ADB Script Converter'\nshortDescription: 'Converts natural language commands into ADB (Android Debug Bridge) scripts using LLMs.'\ntechnologies: ['Python', 'LLM', 'LangChain', 'Streamlit', 'NLP']\ngithubUrl: 'https://github.com/AmarChoudhary-ai/adb-script-converter' # Example URL\nliveDemoUrl: 'https://adb-script-converter.streamlit.app/' # Example URL\nthumbnailImage: '/images/projects/adb-converter-thumb.png' # Path relative to /public\norder: 1 # Lower numbers appear first\nroleContribution: 'Developed the core LLM integration and prompt engineering. Built the Streamlit interface for user interaction.'\nchallengesLearnings: 'Handling the ambiguity of natural language and ensuring the generated ADB commands were accurate and safe was challenging. Learned advanced prompt chaining techniques.'\n---\n\n## Project Overview\n\nThis project empowers users to interact with Android devices more intuitively by converting plain English commands into executable `adb` scripts. It leverages the power of Large Language Models (LLMs) to understand user intent and generate the corresponding technical commands.\n\n## Problem Solved\n\nThe `adb` command-line tool, while powerful, has a steep learning curve with numerous commands and options. Remembering the exact syntax can be difficult. This tool bridges that gap, allowing users to perform common tasks like installing apps, transferring files, or taking screenshots using simple natural language.\n\n## Key Features\n\n*   **Natural Language Understanding (NLU):** Interprets user commands phrased in everyday language.\n*   **ADB Script Generation:** Accurately produces `adb` commands based on the interpreted intent.\n*   **Interactive Interface:** A Streamlit-based web application provides an easy-to-use front-end.\n*   **Extensibility:** Designed with the potential to add support for more complex ADB commands and scenarios.\n\n## Technical Implementation\n\n*   The core logic relies on **LangChain** to orchestrate interactions with an **LLM** (e.g., GPT, Claude).\n*   Carefully engineered prompts guide the LLM to extract key information and map it to the correct ADB command structure.\n*   The application is built entirely in **Python** and deployed using **Streamlit Cloud**, making it easily accessible.\n\n*(Add more details, screenshots, or diagrams as needed)*\n",
  "/src/data/projects/intelligent-career-advisor.mdx": "---\ntitle: 'Intelligent Career Advisor AI'\nshortDescription: 'AI-powered career advisor suggesting roles based on skills and interests, using LangGraph.'\ntechnologies: ['Python', 'LangGraph', 'AI', 'VectorDB', 'RAG', 'LLM']\ngithubUrl: 'https://github.com/AmarChoudhary-ai/career-advisor' # Example URL\n# liveDemoUrl: '' # No live demo specified\nthumbnailImage: '/images/projects/career-advisor-thumb.png' # Path relative to /public\norder: 2\nroleContribution: 'Designed the agentic workflow using LangGraph. Implemented the RAG pipeline with a Vector Database for fetching relevant career information. Integrated LLM for conversational responses.'\nchallengesLearnings: 'Structuring the multi-agent conversation flow effectively with LangGraph required careful state management. Optimizing the RAG system involved balancing retrieval relevance with generation quality to provide concise yet informative advice.'\n---\n\n## Project Overview\n\nThis project introduces an AI-driven career advisor that provides personalized guidance. By analyzing a user's skills, experience level, and professional interests, the system recommends suitable job roles, identifies potential skill gaps, and suggests relevant learning resources or industry insights.\n\n## Problem Solved\n\nCareer exploration can often feel overwhelming due to the vast number of options and the difficulty in matching personal attributes to job requirements. This AI tool simplifies the process by offering structured, data-driven, and personalized career recommendations.\n\n## Key Features\n\n*   **Agentic Workflow:** Uses **LangGraph** to create a system where different AI agents collaborate (e.g., one agent analyzes skills, another searches for roles, another synthesizes advice).\n*   **Retrieval-Augmented Generation (RAG):** Leverages a **Vector Database** (like ChromaDB or FAISS) populated with career data (job descriptions, skill requirements, industry trends) to provide up-to-date and relevant information.\n*   **Personalized Recommendations:** Tailors suggestions based on the individual user's profile.\n*   **Conversational Interface:** Interacts with the user through a natural language conversation powered by an **LLM**.\n\n## Technical Implementation\n\n*   The application is built primarily in **Python**.\n*   **LangGraph** manages the state and flow between different AI reasoning steps.\n*   Vector embeddings and similarity search are used for the RAG component.\n*   An LLM API (e.g., OpenAI, Anthropic) provides the natural language generation capabilities.\n\n*(Add more details, screenshots, or diagrams as needed)*\n",
  "/src/data/projects/generative-ai-question-generator.mdx": "---\ntitle: 'Generative AI Question Generator'\nshortDescription: 'Generates diverse questions from given text or topics using Generative AI models.'\ntechnologies: ['Python', 'GenAI', 'Transformers', 'NLP', 'Speech Recognition', 'Hugging Face']\ngithubUrl: 'https://github.com/AmarChoudhary-ai/question-generator' # Example URL\nliveDemoUrl: 'https://huggingface.co/spaces/your-hf-space' # Example URL\nthumbnailImage: '/images/projects/question-gen-thumb.png' # Path relative to /public\norder: 3\nroleContribution: 'Fine-tuned a transformer model (e.g., T5) for question generation using Hugging Face libraries. Integrated Whisper for speech-to-text input.'\nchallengesLearnings: 'Ensuring the generated questions were relevant, grammatically correct, and diverse required careful model selection and fine-tuning. Handling audio input processing and transcription accuracy for various accents was another key challenge.'\n---\n\n## Project Overview\n\nThis tool harnesses the power of Generative AI to automate the creation of questions from various input sources, including text documents, specific topics, or even spoken audio. It aims to produce diverse question types suitable for learning, assessment, or content engagement.\n\n## Problem Solved\n\nCrafting high-quality questions is a crucial but often time-consuming task for educators, content creators, and researchers. This AI-driven generator significantly speeds up the process, allowing users to quickly generate question sets for quizzes, study guides, or interactive content.\n\n## Key Features\n\n*   **Multi-Modal Input:** Accepts text files, pasted text, keywords, or audio recordings.\n*   **Diverse Question Types:** Capable of generating multiple-choice, open-ended, true/false, and potentially fill-in-the-blank questions.\n*   **Customization (Potential):** Future development could allow users to specify difficulty levels or desired cognitive skills (e.g., recall, analysis).\n*   **Speech Recognition:** Integrates with models like OpenAI's Whisper via **Hugging Face** libraries to process audio input.\n\n## Technical Implementation\n\n*   The core generation relies on **Transformer** models (like T5 or BART) accessed and fine-tuned using the **Hugging Face** ecosystem (`transformers`, `datasets`).\n*   **Python** serves as the primary development language.\n*   The live demo is hosted on **Hugging Face Spaces**, showcasing the model's capabilities in an interactive environment.\n\n*(Add more details, screenshots, or diagrams as needed)*\n",
  "/src/data/projects/erp-chatbot-rahul.mdx": "---\ntitle: 'ERP Chatbot (Rahul)'\nshortDescription: 'Hindi-speaking chatbot designed to interact with ERP systems for common queries.'\ntechnologies: ['Python', 'NLP', 'Chatbot Framework', 'Hindi NLP', 'API Integration', 'Rasa']\ngithubUrl: 'https://github.com/AmarChoudhary-ai/erp-chatbot' # Example URL\n# liveDemoUrl: '' # No live demo specified\nthumbnailImage: '/images/projects/erp-chatbot-thumb.png' # Path relative to /public\norder: 4\nroleContribution: 'Led the development of the Hindi NLP components using libraries tailored for Indic languages. Designed the conversational dialogues and intent recognition logic within the Rasa framework. Integrated with mock ERP APIs for backend actions.'\nchallengesLearnings: 'Handling the nuances of Hindi language processing, including transliteration variations and identifying entities in a less resource-rich language compared to English. Designing robust intent classification and slot filling for ERP-specific queries within Rasa was a key learning experience.'\n---\n\n## Project Overview\n\n\"Rahul\" is a specialized chatbot engineered to understand and respond to user queries in **Hindi** regarding common Enterprise Resource Planning (ERP) system tasks. Users can interact with Rahul conversationally to check information like leave balances, inventory levels, or employee details.\n\n## Problem Solved\n\nMany ERP systems have complex interfaces primarily designed for English users. Rahul aims to improve accessibility for Hindi-speaking employees by providing a simple, conversational way to access frequently needed information, reducing training time and improving efficiency for basic tasks.\n\n## Key Features\n\n*   **Hindi Natural Language Understanding (NLU):** Built to specifically process and understand queries in Hindi (Devanagari script and potentially Hinglish transliteration).\n*   **ERP Intent Recognition:** Identifies user goals related to specific ERP functions (e.g., `check_leave_balance`, `query_product_stock`).\n*   **Conversational Dialogue Management:** Uses a framework like **Rasa** to manage multi-turn conversations and ask clarifying questions if needed.\n*   **API Integration:** Designed to connect with backend ERP system APIs (simulated via mock APIs during development) to fetch real-time data.\n\n## Technical Implementation\n\n*   Developed using **Python** and the **Rasa** open-source chatbot framework for NLU and dialogue management.\n*   Incorporated **Hindi NLP** techniques and potentially libraries specific to Indic languages for accurate tokenization, entity extraction, and intent classification.\n*   Defined custom actions within Rasa to handle API calls to the (mock) ERP backend.\n\n*(Add more details, screenshots, or diagrams as needed)*\n",
  "/src/data/skills.json": "[\n  {\n    \"name\": \"Python\",\n    \"category\": \"Programming\"\n  },\n  {\n    \"name\": \"SQL\",\n    \"category\": \"Programming\"\n  },\n  {\n    \"name\": \"JavaScript/TypeScript\",\n    \"category\": \"Programming\"\n  },\n  {\n    \"name\": \"TensorFlow\",\n    \"category\": \"ML/DL\"\n  },\n  {\n    \"name\": \"PyTorch\",\n    \"category\": \"ML/DL\"\n  },\n  {\n    \"name\": \"Scikit-learn\",\n    \"category\": \"ML/DL\"\n  },\n  {\n    \"name\": \"Keras\",\n    \"category\": \"ML/DL\"\n  },\n  {\n    \"name\": \"LangChain\",\n    \"category\": \"GenAI\"\n  },\n  {\n    \"name\": \"LlamaIndex\",\n    \"category\": \"GenAI\"\n  },\n    {\n    \"name\": \"LangGraph\",\n    \"category\": \"GenAI\"\n  },\n  {\n    \"name\": \"Hugging Face Transformers\",\n    \"category\": \"GenAI\"\n  },\n  {\n    \"name\": \"LLMs (GPT, Llama, Mistral)\",\n    \"category\": \"GenAI\"\n  },\n  {\n    \"name\": \"Vector Databases (ChromaDB, FAISS, Pinecone)\",\n    \"category\": \"Data Handling\"\n  },\n  {\n    \"name\": \"Pandas & NumPy\",\n    \"category\": \"Data Handling\"\n  },\n   {\n    \"name\": \"Data Visualization (Matplotlib, Seaborn)\",\n    \"category\": \"Data Handling\"\n  },\n  {\n    \"name\": \"Apache Spark\",\n    \"category\": \"Data Handling\"\n  },\n  {\n    \"name\": \"AWS (SageMaker, Lambda, S3, EC2)\",\n    \"category\": \"Cloud/Deployment\"\n  },\n  {\n    \"name\": \"GCP (Vertex AI, Cloud Functions, GCS)\",\n    \"category\": \"Cloud/Deployment\"\n  },\n   {\n    \"name\": \"Docker & Kubernetes (Basic)\",\n    \"category\": \"Cloud/Deployment\"\n  },\n  {\n    \"name\": \"Streamlit & Gradio\",\n    \"category\": \"Cloud/Deployment\"\n  },\n   {\n    \"name\": \"CI/CD (GitHub Actions)\",\n    \"category\": \"Cloud/Deployment\"\n  },\n  {\n    \"name\": \"Git & GitHub\",\n    \"category\": \"Cloud/Deployment\"\n  },\n  {\n    \"name\": \"Problem Solving & Analytical Thinking\",\n    \"category\": \"Soft Skills\"\n  },\n  {\n    \"name\": \"Technical Communication & Presentation\",\n    \"category\": \"Soft Skills\"\n  },\n  {\n    \"name\": \"Collaboration & Teamwork\",\n    \"category\": \"Soft Skills\"\n  },\n  {\n    \"name\": \"Agile Methodologies\",\n    \"category\": \"Soft Skills\"\n  },\n  {\n    \"name\": \"Continuous Learning\",\n    \"category\": \"Soft Skills\"\n  }\n]\n",
  "/src/data/about.mdx": "---\ntitle: 'About Me'\nkeyTechnologies:\n  - 'Large Language Models (LLMs)'\n  - 'Generative AI (GenAI) & RAG'\n  - 'Vector Databases (ChromaDB, FAISS)'\n  - 'LangChain, LlamaIndex & LangGraph'\n  - 'PyTorch & TensorFlow/Keras'\n  - 'Python, SQL & Data Visualization'\n  - 'AWS & GCP Cloud Platforms'\n  - 'Docker & Streamlit/Gradio'\nhackathons:\n  - name: 'Amex AI Challenge'\n    description: 'Developed a novel fraud detection model leveraging graph neural networks, achieving top 5% placement among hundreds of participants.'\n  - name: 'Amazon ML Hackathon'\n    description: 'Built and presented a real-time recommendation system prototype using collaborative filtering and content-based approaches.'\n---\n\nDriven by a deep curiosity for understanding data and a passion for creating intelligent systems, I've dedicated the past five years to mastering the fields of **Data Science** and **Artificial Intelligence**.\n\nMy journey has equipped me with a strong foundation in **Machine Learning** principles and extensive hands-on experience, particularly in the rapidly advancing domain of **Generative AI**. I excel at bridging the gap between complex technical challenges and practical, impactful solutions.\n\nI am proficient in designing, training, and deploying models using industry-standard frameworks like **PyTorch** and **TensorFlow/Keras**. My recent focus has been on leveraging the power of **Large Language Models (LLMs)**, utilizing frameworks such as **LangChain**, **LlamaIndex**, and **LangGraph** to build sophisticated AI applications, often incorporating **Retrieval-Augmented Generation (RAG)** patterns with **Vector Databases**.\n\nMy technical toolkit includes robust skills in **Python**, **SQL**, data manipulation libraries (**Pandas**, **NumPy**), and visualization tools. I am comfortable deploying and managing applications on cloud platforms like **AWS** (SageMaker, Lambda, S3) and **GCP** (Vertex AI, Cloud Functions), utilizing containerization with **Docker**, and building interactive demos with **Streamlit** or **Gradio**.\n\nBeyond the code, I'm motivated by the potential of AI to solve meaningful problems. My success in competitive environments like the **Amex AI Challenge** and the **Amazon ML Hackathon** highlights my ability to innovate quickly, collaborate effectively, and deliver results under pressure.\n\nI am constantly seeking new challenges and opportunities to apply my skills, contribute to cutting-edge projects, and continue learning in the dynamic field of AI/ML.\n",
  "/src/types/index.ts": "// Central barrel file for exporting all types\n\nexport * from './project';\nexport * from './skill';\nexport * from './about';\n",
  "/src/types/project.ts": "/**\n * Defines the structure for the frontmatter (metadata) of a project Markdown/MDX file.\n * All fields are optional except title and shortDescription, allowing flexibility.\n */\nexport interface ProjectFrontmatter {\n  title: string;\n  shortDescription: string;\n  technologies?: string[];\n  githubUrl?: string;\n  liveDemoUrl?: string;\n  thumbnailImage?: string; // Path relative to /public folder (e.g., /images/projects/thumb.png)\n  order?: number; // Lower numbers appear first in lists\n  roleContribution?: string;\n  challengesLearnings?: string;\n  isFeatured?: boolean; // Can be used to highlight specific projects\n  date?: string; // Optional project date (e.g., 'YYYY-MM-DD' or 'YYYY')\n  // Add any other relevant metadata fields here\n}\n\n/**\n * Defines the structure for a complete project object,\n * including its slug (derived from filename), frontmatter, and Markdown content.\n */\nexport interface Project {\n  slug: string;\n  frontmatter: ProjectFrontmatter;\n  content: string; // Raw Markdown/MDX content\n  // contentHtml?: string; // Optional: Could hold server-side rendered HTML if needed\n}\n",
  "/src/types/skill.ts": "/**\n * Defines the structure for a single skill item.\n */\nexport interface Skill {\n  name: string; // The name of the skill (e.g., 'Python', 'TensorFlow')\n  category: string; // The category the skill belongs to (e.g., 'Programming', 'ML/DL', 'GenAI')\n  icon?: string; // Optional: Identifier for an icon (e.g., 'python-icon', could map to an SVG or library component)\n  proficiency?: number; // Optional: Numerical proficiency (1-5 scale). Use cautiously as it's subjective.\n  // description?: string; // Optional: Brief description on hover/click\n}\n",
  "/src/types/about.ts": "/**\n * Defines the structure for the frontmatter (metadata) of the About page Markdown/MDX file.\n */\nexport interface AboutFrontmatter {\n    title?: string; // Optional title override (usually taken from page structure)\n    keyTechnologies?: string[]; // List of key technologies to highlight\n    hackathons?: Array<{ // Array of hackathon/challenge experiences\n        name: string; // Name of the event\n        description: string; // Brief description of participation/achievement\n    }>;\n    // Add other relevant metadata fields if needed (e.g., years of experience)\n}\n\n/**\n * Defines the structure for the complete content of the About page,\n * including frontmatter and Markdown content.\n */\nexport interface AboutContent {\n    frontmatter: AboutFrontmatter;\n    content: string; // Raw Markdown/MDX content\n    // contentHtml?: string; // Optional: Server-side rendered HTML if needed\n}\n",
  "/tailwind.config.ts": "import type { Config } from 'tailwindcss';\nimport typography from '@tailwindcss/typography';\n\nconst config: Config = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  darkMode: 'class', // Enable dark mode based on class attribute (e.g., <html class=\"dark\">)\n  theme: {\n    extend: {\n      container: {\n        center: true,\n        padding: {\n          DEFAULT: '1rem', // Default padding on mobile\n          sm: '2rem',    // Padding on small screens and up\n          lg: '4rem',    // Padding on large screens and up\n          xl: '5rem',    // Padding on extra-large screens and up\n        },\n      },\n      colors: {\n        // Define CSS variables for theming (optional but good practice)\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        // You can still define direct color values if needed\n        // e.g., brandBlue: '#007bff',\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n        // Add custom keyframes from global.css if needed\n        fadeInUp: {\n            'from': { opacity: '0', transform: 'translateY(20px)' },\n            'to': { opacity: '1', transform: 'translateY(0)' },\n        },\n        fadeIn: {\n            'from': { opacity: '0' },\n            'to': { opacity: '1' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        // Add custom animations from global.css\n        'fade-in-up': 'fadeInUp 0.6s ease-out forwards',\n        'fade-in': 'fadeIn 0.8s ease-in forwards',\n      },\n      // Extend typography plugin styles\n      typography: (theme: (arg0: string) => any) => ({\n        DEFAULT: {\n          css: {\n            // Base prose styles matching CSS variables (if used) or direct values\n            '--tw-prose-body': 'hsl(var(--foreground))',\n            '--tw-prose-headings': 'hsl(var(--foreground))',\n            '--tw-prose-lead': 'hsl(var(--muted-foreground))',\n            '--tw-prose-links': 'hsl(var(--primary))',\n            '--tw-prose-bold': 'hsl(var(--foreground))',\n            '--tw-prose-counters': 'hsl(var(--muted-foreground))',\n            '--tw-prose-bullets': 'hsl(var(--muted-foreground))',\n            '--tw-prose-hr': 'hsl(var(--border))',\n            '--tw-prose-quotes': 'hsl(var(--foreground))',\n            '--tw-prose-quote-borders': 'hsl(var(--border))',\n            '--tw-prose-captions': 'hsl(var(--muted-foreground))',\n            '--tw-prose-code': 'hsl(var(--foreground))',\n            '--tw-prose-pre-code': 'hsl(var(--foreground))',\n            '--tw-prose-pre-bg': 'hsl(var(--muted))',\n            '--tw-prose-th-borders': 'hsl(var(--border))',\n            '--tw-prose-td-borders': 'hsl(var(--border))',\n            // Dark mode prose styles using invert variables\n            '--tw-prose-invert-body': 'hsl(var(--muted-foreground))', // Lighten body text in dark mode\n            '--tw-prose-invert-headings': 'hsl(var(--background))', // Use background (white) for headings\n            '--tw-prose-invert-lead': 'hsl(var(--muted-foreground))',\n            '--tw-prose-invert-links': 'hsl(var(--primary))',\n            '--tw-prose-invert-bold': 'hsl(var(--background))',\n            '--tw-prose-invert-counters': 'hsl(var(--muted-foreground))',\n            '--tw-prose-invert-bullets': 'hsl(var(--muted-foreground))',\n            '--tw-prose-invert-hr': 'hsl(var(--border))',\n            '--tw-prose-invert-quotes': 'hsl(var(--background))',\n            '--tw-prose-invert-quote-borders': 'hsl(var(--border))',\n            '--tw-prose-invert-captions': 'hsl(var(--muted-foreground))',\n            '--tw-prose-invert-code': 'hsl(var(--background))',\n            '--tw-prose-invert-pre-code': 'hsl(var(--muted-foreground))', // Lighten code block text\n            '--tw-prose-invert-pre-bg': 'hsl(var(--accent))', // Use accent for code bg\n            '--tw-prose-invert-th-borders': 'hsl(var(--border))',\n            '--tw-prose-invert-td-borders': 'hsl(var(--border))',\n             // Customizations\n             'code::before': { content: 'none' },\n             'code::after': { content: 'none' },\n             code: {\n                fontWeight: '500',\n                padding: '0.2em 0.4em',\n                margin: '0 0.1em',\n                borderRadius: '0.25em',\n                backgroundColor: 'var(--tw-prose-pre-bg)',\n             },\n             'a': {\n                textDecoration: 'none',\n                fontWeight: '500',\n                transition: 'opacity 0.2s ease-in-out',\n                '&:hover': {\n                    opacity: '0.8',\n                },\n             },\n             'h1, h2, h3, h4, h5, h6': {\n                fontWeight: '700',\n             }\n          },\n        },\n      }),\n    },\n  },\n  plugins: [\n    typography,\n    // require('@tailwindcss/forms'), // Uncomment if using forms plugin\n    // require('@tailwindcss/aspect-ratio'), // Uncomment if using aspect ratio plugin\n    require('tailwindcss-animate'), // For shadcn/ui animations (accordion, etc.)\n  ],\n};\n\nexport default config;\n\n// Add corresponding CSS variables to global.css -> :root and :root.dark\n",
  "/src/app/global.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  /* Define CSS variables for colors (light mode) */\n  :root {\n    --background: 0 0% 100%; /* white */\n    --foreground: 222.2 84% 4.9%; /* near black */\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%; /* blue-600 */\n    --primary-foreground: 210 40% 98%; /* near white */\n    --secondary: 210 40% 96.1%; /* gray-100 */\n    --secondary-foreground: 222.2 47.4% 11.2%; /* near black */\n    --muted: 210 40% 96.1%; /* gray-100 */\n    --muted-foreground: 215.4 16.3% 46.9%; /* gray-500 */\n    --accent: 210 40% 96.1%; /* gray-100 */\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%; /* red-500 */\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%; /* gray-200 */\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%; /* blue-600 */\n    --radius: 0.5rem; /* Default border radius */\n  }\n\n  /* Define CSS variables for colors (dark mode) */\n  .dark {\n    --background: 222.2 84% 4.9%; /* near black */\n    --foreground: 210 40% 98%; /* near white */\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%; /* lighter blue */\n    --primary-foreground: 222.2 47.4% 11.2%; /* near black */\n    --secondary: 217.2 32.6% 17.5%; /* dark gray */\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%; /* lighter gray */\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%; /* darker red */\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 217.2 91.2% 59.8%;\n  }\n\n  /* Apply base styles */\n  * {\n    @apply border-border; /* Apply border color variable */\n  }\n\n  html {\n      scroll-behavior: smooth;\n      scroll-padding-top: 6rem; /* Offset for sticky nav */\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: 'rlig' 1, 'calt' 1; /* Enable common ligatures */\n  }\n\n  /* Headings with slightly more spacing */\n  h1, h2, h3, h4, h5, h6 {\n      @apply font-bold tracking-tight;\n  }\n  h1 { @apply text-3xl md:text-4xl lg:text-5xl mb-6 md:mb-8; }\n  h2 { @apply text-2xl md:text-3xl lg:text-4xl mb-4 md:mb-6; }\n  h3 { @apply text-xl md:text-2xl lg:text-3xl mb-3 md:mb-4; }\n\n  /* Base paragraph styling */\n  p {\n      @apply leading-relaxed mb-4 text-base md:text-lg text-foreground/80; /* Slightly muted text */\n  }\n\n   /* Base link styling */\n  a {\n      @apply text-primary transition-colors duration-200 hover:text-primary/80 font-medium;\n  }\n}\n\n/* Remove default keyframes if defined in tailwind.config.js */\n/* Or ensure they match the config */\n@layer utilities {\n    /* Add any custom utility classes here */\n    .line-clamp-1 {\n        overflow: hidden;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: 1;\n    }\n    .line-clamp-2 {\n        overflow: hidden;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: 2;\n    }\n    .line-clamp-3 {\n        overflow: hidden;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: 3;\n    }\n}\n",
  "/tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true, // Recommended\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\", // Recommended for modern JS\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"baseUrl\": \".\", // Needed for path aliases\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \".next/types/**/*.ts\",\n    \"jest.config.js\", // Include Jest config if using TS\n    \"jest.setup.js\"   // Include Jest setup if using TS\n    ],\n  \"exclude\": [\"node_modules\"]\n}",
  "/jest.config.js": "// jest.config.js\nconst nextJest = require('next/jest');\n\n// Providing the path to your Next.js app to load next.config.js and .env files in your test environment\nconst createJestConfig = nextJest({\n  dir: './',\n});\n\n// Add any custom config to be passed to Jest\n/** @type {import('jest').Config} */\nconst customJestConfig = {\n  // Add more setup options before each test is run\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n\n  testEnvironment: 'jest-environment-jsdom',\n  moduleNameMapper: {\n    // Handle module aliases (this will be automatically configured by next/jest)\n    // Ensure these match your tsconfig.json paths\n    '^@/(.*)$': '<rootDir>/src/$1',\n\n    // Mock static assets\n    '\\.(css|less|sass|scss)$': 'identity-obj-proxy', // Mock CSS Modules\n    '\\.(gif|ttf|eot|svg|png|jpg|jpeg|pdf)$': '<rootDir>/__mocks__/fileMock.js', // Mock file imports\n\n    // Mock react-calendly (as it might rely on browser APIs not in JSDOM)\n    'react-calendly': '<rootDir>/__mocks__/reactCalendlyMock.js'\n  },\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\n  transformIgnorePatterns: [\n    '/node_modules/',\n    '^.+\\.module\\.(css|sass|scss)$',\n  ],\n  // Optional: Collect coverage\n  // collectCoverage: true,\n  // coverageDirectory: 'coverage',\n  // coverageProvider: 'v8',\n};\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nmodule.exports = createJestConfig(customJestConfig);\n",
  "/jest.setup.js": "// Optional: configure or add this file if you want to use commands like expect(...).toBeInTheDocument()\n// Learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n",
  "/__mocks__/fileMock.js": "// __mocks__/fileMock.js\n// Used by Jest to mock static file imports (images, pdf, etc.)\nmodule.exports = 'test-file-stub';\n",
  "/__mocks__/reactCalendlyMock.js": "// __mocks__/reactCalendlyMock.js\n// Mocks the react-calendly components for Jest tests\n\nconst React = require('react');\n\nconst MockCalendlyComponent = ({ url, ...props }) => {\n  // Render a simple placeholder div with identifiable attributes\n  return React.createElement('div', {\n    'data-testid': 'mock-calendly-widget',\n    'data-url': url,\n    ...props\n  }, 'Mock Calendly Widget');\n};\n\nmodule.exports = {\n  InlineWidget: MockCalendlyComponent,\n  PopupButton: MockCalendlyComponent, // Mock other exports if needed\n  PopupModal: MockCalendlyComponent,\n  useCalendlyEventListener: () => {}, // Mock the hook\n};\n",
  "/tests/components/ui/Button.test.tsx": "import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from '@/components/ui/Button';\nimport '@testing-library/jest-dom';\n\n/**\n * Unit tests for the Button component.\n */\ndescribe('UI Button Component', () => {\n  test('renders button with children', () => {\n    render(<Button>Click Me</Button>);\n    const buttonElement = screen.getByRole('button', { name: /click me/i });\n    expect(buttonElement).toBeInTheDocument();\n  });\n\n  test('applies the correct primary variant class by default', () => {\n    render(<Button>Primary Button</Button>);\n    const buttonElement = screen.getByRole('button', { name: /primary button/i });\n    expect(buttonElement).toHaveClass('bg-blue-600'); // Check specific primary class\n  });\n\n  test('applies the correct secondary variant class', () => {\n    render(<Button variant=\"secondary\">Secondary Action</Button>);\n    const buttonElement = screen.getByRole('button', { name: /secondary action/i });\n    expect(buttonElement).toHaveClass('bg-gray-200'); // Check specific secondary class\n  });\n\n  test('applies the correct outline variant class', () => {\n    render(<Button variant=\"outline\">Outline Action</Button>);\n    const buttonElement = screen.getByRole('button', { name: /outline action/i });\n    expect(buttonElement).toHaveClass('border'); // Check border class\n  });\n\n  test('applies the correct size class', () => {\n    render(<Button size=\"lg\">Large Button</Button>);\n    const buttonElement = screen.getByRole('button', { name: /large button/i });\n    expect(buttonElement).toHaveClass('h-11'); // Check specific large size class\n  });\n\n  test('renders as child when asChild prop is true', () => {\n    render(\n      <Button asChild>\n        <a href=\"/\">Link Button</a>\n      </Button>\n    );\n    // Check if it rendered an anchor tag instead of a button\n    const linkElement = screen.getByRole('link', { name: /link button/i });\n    expect(linkElement).toBeInTheDocument();\n    expect(linkElement.tagName).toBe('A');\n    // Ensure button-like classes are applied to the child\n    expect(linkElement).toHaveClass('bg-blue-600'); // Check for default primary variant class\n  });\n\n  test('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Disabled Button</Button>);\n    const buttonElement = screen.getByRole('button', { name: /disabled button/i });\n    expect(buttonElement).toBeDisabled();\n    expect(buttonElement).toHaveClass('disabled:opacity-50');\n  });\n\n  test('calls onClick handler when clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Clickable</Button>);\n    const buttonElement = screen.getByRole('button', { name: /clickable/i });\n    fireEvent.click(buttonElement);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not call onClick handler when disabled and clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick} disabled>Disabled Click</Button>);\n    const buttonElement = screen.getByRole('button', { name: /disabled click/i });\n    fireEvent.click(buttonElement);\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n});\n",
  "/tests/components/features/ProjectCard.test.tsx": "import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport ProjectCard from '@/components/features/ProjectCard';\nimport { Project } from '@/types/project';\nimport '@testing-library/jest-dom';\n\n// Mock Next.js components and hooks\njest.mock('next/image', () => ({\n  __esModule: true,\n  default: (props: any) => {\n    // eslint-disable-next-line @next/next/no-img-element\n    // Basic mock: renders img tag with props, crucial are src and alt\n    return <img src={props.src} alt={props.alt} sizes={props.sizes} className={props.className} fill={props.fill ? \"true\" : undefined} />;\n  },\n}));\njest.mock('next/link', () => ({\n    __esModule: true,\n    default: ({ children, href, ...props }: React.PropsWithChildren<{ href: string }>) => {\n      // Basic mock: renders anchor tag with href\n      return <a href={href} {...props}>{children}</a>;\n    },\n  }));\n\n/**\n * Unit tests for the ProjectCard component.\n */\ndescribe('Feature ProjectCard Component', () => {\n  const mockProject: Project = {\n    slug: 'test-project',\n    frontmatter: {\n      title: 'Test Project